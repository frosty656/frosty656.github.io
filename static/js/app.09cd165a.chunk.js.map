{"version":3,"sources":["ItemInfo.tsx","App.tsx"],"names":["resources","allItems","name","itemsPerMin","building","value","ingredientList","amount","App","useState","treeView","setTreeView","currentItem","setCurrentItem","setAmount","ingredients","setIngredients","workshopLevel","setWorkShopLevel","furnaceLevel","setFurnaceLevel","machineShopLevel","setMachineShopLevel","industrialFactoryLevel","setIndustrialFactoryLevel","forgeLevel","setForgeLevel","manufacturerLevel","setManufacturerLevel","extractorLevel","setExtractorLevel","rawResources","setRawResources","ingList","resourceCount","useEffect","ingInfo","find","item","multiplier","levelMultiplier","getBuildingLevel","numberOfBuildings","addIng","GenerateList","amountPerMin","depth","itemInfo","forEach","ingredient","requireAmountPerMin","Math","ceil","includes","length","itemInArray","element","Name","Amount","push","Building","toLowerCase","level","View","style","alignItems","flexDirection","padding","Text","styles","buildingLevel","TextInput","buildingLevelInput","keyboardType","onChangeText","input","Number","replace","toString","paddingRight","width","borderColor","borderRadius","borderWidth","height","selectedValue","onValueChange","itemValue","itemIndex","itemStyle","sort","a","b","localeCompare","map","data","Item","label","alignSelf","justifyContent","TouchableOpacity","backgroundColor","onPress","paddingLeft","StyleSheet","create","container","flex","paddingBottom"],"mappings":"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","file":"static/js/app.09cd165a.chunk.js","sourcesContent":["export const resources = [\r\n  \"Copper Ore\",\r\n  \"Iron Ore\",\r\n  \"Wood Log\",\r\n  \"Stone\",\r\n  \"Coal\",\r\n  \"Wolframite\",\r\n];\r\n\r\nexport const allItems = [\r\n  {\r\n    name: \"Wood Plank\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Wood Log\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Wood Frame\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Wood Plank\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Copper Wire\",\r\n    itemsPerMin: 30,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 1.5 }],\r\n  },\r\n  {\r\n    name: \"Heat Sink\",\r\n    itemsPerMin: 10,\r\n    building: \"Workshop\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Iron Gear\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Iron Plating\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Steel Rod\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 35,\r\n    ingredientList: [{ name: \"Steel\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Sand\",\r\n    itemsPerMin: 40,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Stone\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Condenser Lens\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 12,\r\n    ingredientList: [{ name: \"Glass\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Carbon Fiber\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Graphite\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Coupler\",\r\n    itemsPerMin: 6,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Tungsten Carbide\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Iron Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Iron Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Copper Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Copper Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Silicone\",\r\n    itemsPerMin: 20,\r\n    building: \"Furnace\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Sand\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Glass\",\r\n    itemsPerMin: 10,\r\n    building: \"Furnace\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Sand\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Tungsten Ore\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Wolframite\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Electromagnet\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Machine Shop\",\r\n    value: 14,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 6 },\r\n      { name: \"Iron Ingot\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Logic Circuit\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 10,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 3 },\r\n      { name: \"Silicone\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Metal Frame\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Wood Frame\", amount: 1 },\r\n      { name: \"Iron Plating\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Battery\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Machine Shop\",\r\n    value: 150,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Graphite\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Rotor\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Iron Plating\", amount: 2 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Nano Wire\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Glass\", amount: 4 },\r\n      { name: \"Carbon Fiber\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Graphite\",\r\n    itemsPerMin: 15,\r\n    building: \"Forge\",\r\n    value: 6,\r\n    ingredientList: [\r\n      { name: \"Wood Log\", amount: 3 },\r\n      { name: \"Coal\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Steel\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Iron Ore\", amount: 6 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Concrete\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Sand\", amount: 10 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tungsten Carbide\",\r\n    itemsPerMin: 12,\r\n    building: \"Forge\",\r\n    value: 16,\r\n    ingredientList: [\r\n      { name: \"Tungsten Ore\", amount: 2 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Computer\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Industrial Factory\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Heat Sink\", amount: 3 },\r\n      { name: \"Metal Frame\", amount: 1 },\r\n      { name: \"Logic Circuit\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electric Motor\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 4 },\r\n      { name: \"Rotor\", amount: 2 },\r\n      { name: \"Battery\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electron Microscope\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Manufacturer\",\r\n    value: 300,\r\n    ingredientList: [\r\n      { name: \"Condenser Lens\", amount: 4 },\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Turbocharger\",\r\n    itemsPerMin: 4,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 8 },\r\n      { name: \"Logic Circuit\", amount: 4 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n      { name: \"Coupler\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Super Computer\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 1 },\r\n      { name: \"Heat Sink\", amount: 8 },\r\n      { name: \"Turbocharger\", amount: 1 },\r\n      { name: \"Coupler\", amount: 8 },\r\n    ],\r\n  },\r\n  // Items that I have not unlocked myself\r\n  {\r\n    name: \"Atomic Locator\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 24 },\r\n      { name: \"Copper Wire\", amount: 50 },\r\n      { name: \"Electron Microscope\", amount: 2 },\r\n      { name: \"Super Computer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Earth Token\",\r\n    itemsPerMin: 1.428571429,\r\n    building: \"Earth Transporter\",\r\n    value: 250,\r\n    ingredientList: [{ name: \"Matter Duplicator\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Energy Cube\",\r\n    itemsPerMin: 2,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Battery\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Gyroscope\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 12 },\r\n      { name: \"Rotor\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Industrial Frame\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 6 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Tungsten Carbide\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Magnetic Field Generator\",\r\n    itemsPerMin: 1.5,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 10 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n      { name: \"Nano Wire\", amount: 10 },\r\n      { name: \"Stabilizer\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Compressor\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electric Motor\", amount: 2 },\r\n      { name: \"Tank\", amount: 1 },\r\n      { name: \"Turbocharger\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Duplicator\",\r\n    itemsPerMin: 2 / 3,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Atomic Locator\", amount: 4 },\r\n      { name: \"Energy Cube\", amount: 5 },\r\n      { name: \"Particle Glue\", amount: 100 },\r\n      { name: \"Quantum Entangler\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Particle Glue\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Matter Compressor\", amount: 0.1 }\r\n    ],\r\n  },\r\n  {\r\n    name: \"Quantum Entangler\",\r\n    itemsPerMin: 1,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Magnetic Field Generator\", amount: 1 },\r\n      { name: \"Stabilizer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Stabilizer\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 1 },\r\n      { name: \"Electric Motor\", amount: 1 },\r\n      { name: \"Gyroscope\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tank\",\r\n    itemsPerMin: 6,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 4 },\r\n      { name: \"Glass\", amount: 2 },\r\n      { name: \"Tungsten Ore\", amount: 4 },\r\n    ],\r\n  },\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\nimport { allItems, resources } from \"./ItemInfo\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\n\r\nexport default function App() {\r\n  interface Ingredient {\r\n    name: string;\r\n    amount: number;\r\n    depth: number;\r\n    numberOfBuildings: number;\r\n    building: string;\r\n  }\r\n\r\n  interface Resources {\r\n    Name: string;\r\n    Amount: number;\r\n    Building: string;\r\n  }\r\n  const [treeView, setTreeView] = useState(true);\r\n  const [currentItem, setCurrentItem] = useState(\"Wood Plank\");\r\n  const [amount, setAmount] = useState(1);\r\n  const [ingredients, setIngredients] = useState<Ingredient[]>([]);\r\n  const [workshopLevel, setWorkShopLevel] = useState(1);\r\n  const [furnaceLevel, setFurnaceLevel] = useState(1);\r\n  const [machineShopLevel, setMachineShopLevel] = useState(1);\r\n  const [industrialFactoryLevel, setIndustrialFactoryLevel] = useState(1);\r\n  const [forgeLevel, setForgeLevel] = useState(1);\r\n  const [manufacturerLevel, setManufacturerLevel] = useState(1);\r\n  const [extractorLevel, setExtractorLevel] = useState(1);\r\n  const [rawResources, setRawResources] = useState<Resources[]>([]);\r\n\r\n  var ingList: Ingredient[] = [];\r\n  var resourceCount: Resources[] = [];\r\n\r\n  // If any params are updated then we want to recalculate the list\r\n  useEffect(() => {\r\n    ingList = [];\r\n    resourceCount = [];\r\n\r\n    const ingInfo = allItems.find((item) => {\r\n      return item.name == currentItem;\r\n    });\r\n\r\n    const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n    const multiplier = levelMultiplier(buildingLevel!);\r\n    const numberOfBuildings = amount / ingInfo!.itemsPerMin / multiplier;\r\n\r\n    var building = ingInfo!.building;\r\n    addIng(currentItem, amount, 0, numberOfBuildings, building);\r\n    GenerateList(currentItem, amount);\r\n    setIngredients(ingList);\r\n    setRawResources(resourceCount);\r\n  }, [\r\n    workshopLevel,\r\n    furnaceLevel,\r\n    machineShopLevel,\r\n    industrialFactoryLevel,\r\n    forgeLevel,\r\n    manufacturerLevel,\r\n    extractorLevel,\r\n    amount,\r\n    currentItem,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (ingList.length > 0) {\r\n      return;\r\n    }\r\n  }, [ingList]);\r\n\r\n  const addIng = (\r\n    name: string,\r\n    amount: number,\r\n    depth: number,\r\n    numberOfBuildings: number,\r\n    building: string\r\n  ) => {\r\n    // Add to the sum list\r\n    var itemInArray = false;\r\n    resourceCount.forEach((element) => {\r\n      if (element.Name == name) {\r\n        element.Amount += amount;\r\n        itemInArray = true;\r\n      }\r\n    });\r\n\r\n    if (!itemInArray) {\r\n      resourceCount.push({\r\n        Name: name,\r\n        Amount: amount,\r\n        Building: building,\r\n      });\r\n    }\r\n\r\n    ingList.push({\r\n      name: name,\r\n      amount: amount,\r\n      depth: depth,\r\n      numberOfBuildings: Math.ceil(numberOfBuildings),\r\n      building: building,\r\n    });\r\n  };\r\n\r\n  function getBuildingLevel(name: string) {\r\n    switch (name.toLowerCase()) {\r\n      case \"workshop\":\r\n        return workshopLevel;\r\n      case \"furnace\":\r\n        return furnaceLevel;\r\n      case \"machineshop\":\r\n        return machineShopLevel;\r\n      case \"industrialfactory\":\r\n        return industrialFactoryLevel;\r\n      case \"forge\":\r\n        return forgeLevel;\r\n      case \"manufacturer\":\r\n        return manufacturerLevel;\r\n      case \"extractor\":\r\n        return extractorLevel;\r\n      case \"Earth Transporter\":\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function levelMultiplier(level: number) {\r\n    switch (level) {\r\n      case 1:\r\n        return 1;\r\n      case 2:\r\n        return 1.5;\r\n      case 3:\r\n        return 2;\r\n      case 4:\r\n        return 3;\r\n      default:\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function GenerateList(name: string, amountPerMin = 1, depth = 1) {\r\n    const itemInfo = allItems.find((item) => {\r\n      return item.name == name;\r\n    });\r\n\r\n    itemInfo?.ingredientList.forEach((ingredient) => {\r\n      const requireAmountPerMin = ingredient.amount * amountPerMin;\r\n      const buildingLevel = getBuildingLevel(\"extractor\");\r\n      const multiplier = levelMultiplier(buildingLevel!);\r\n      const numberOfBuildings = Math.ceil(\r\n        requireAmountPerMin / (7.5 * multiplier)\r\n      );\r\n      if (resources.includes(ingredient.name)) {\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          \"Extractor\"\r\n        );\r\n      } else {\r\n        const ingInfo = allItems.find((item) => {\r\n          return item.name == ingredient.name;\r\n        });\r\n        const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n        const multiplier = levelMultiplier(buildingLevel!);\r\n        const numberOfBuildings =\r\n          requireAmountPerMin / ingInfo!.itemsPerMin / multiplier;\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          ingInfo!.building\r\n        );\r\n        GenerateList(ingredient.name, requireAmountPerMin, depth + 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  function renderList() {\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {ingredients.map((data) => {\r\n          if (data.amount == 0) {\r\n            return null;\r\n          }\r\n          return (\r\n            <Text style={{ paddingLeft: data.depth * 10 }}>\r\n              {data.amount} {data.name} ({data.numberOfBuildings}{\" \"}\r\n              {data.building})\r\n            </Text>\r\n          );\r\n        })}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  function renderIngList() {\r\n    // TODO: This should be cleaned up\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {rawResources\r\n          .sort((a, b) => {\r\n            return a.Name.localeCompare(b.Name);\r\n          })\r\n          .map((data) => {\r\n            var itemsPerMin = 0;\r\n            if (resources.includes(data.Name)) {\r\n              //const buildingLevel = getBuildingLevel(\"extractor\");\r\n              //const multiplier = levelMultiplier(buildingLevel!);\r\n              itemsPerMin = 7.5;\r\n            } else {\r\n              const ingInfo = allItems.find((item) => {\r\n                return item.name == data.Name;\r\n              });\r\n              itemsPerMin = ingInfo!.itemsPerMin;\r\n            }\r\n\r\n            const buildingLevel = getBuildingLevel(data.Building);\r\n\r\n            const multiplier = levelMultiplier(buildingLevel!);\r\n            const numberOfBuildings = data.Amount / itemsPerMin / multiplier;\r\n            return (\r\n              <Text>\r\n                {data.Name}: {data.Amount} ({Math.ceil(numberOfBuildings)}{\" \"}\r\n                {data.Building})\r\n              </Text>\r\n            );\r\n          })}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={{ alignItems: \"center\" }}>\r\n      <View style={{ flexDirection: \"row\", alignItems: \"center\", padding: 5 }}>\r\n        <Text style={styles.buildingLevel}>Extractor Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            setExtractorLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={extractorLevel.toString()}\r\n        />\r\n        <Text style={styles.buildingLevel}>Workshop Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            setWorkShopLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={workshopLevel.toString()}\r\n        />\r\n        <Text style={styles.buildingLevel}>Furnace Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            setFurnaceLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={furnaceLevel.toString()}\r\n        />\r\n      </View>\r\n      <View style={{ flexDirection: \"row\", alignItems: \"center\", padding: 5 }}>\r\n        <Text style={styles.buildingLevel}>Machine Shop Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            setMachineShopLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={machineShopLevel.toString()}\r\n        />\r\n        <Text style={styles.buildingLevel}>Industrial Factory Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            setIndustrialFactoryLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={industrialFactoryLevel.toString()}\r\n        />\r\n        <Text style={styles.buildingLevel}>Forge Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            setForgeLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={forgeLevel.toString()}\r\n        />\r\n      </View>\r\n      <View style={{ flexDirection: \"row\", alignItems: \"center\", padding: 5 }}>\r\n        <Text style={styles.buildingLevel}>Manufacturer Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            setManufacturerLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={manufacturerLevel.toString()}\r\n        />\r\n      </View>\r\n      <View style={{ alignItems: \"center\" }}>\r\n        <View\r\n          style={{ flexDirection: \"row\", alignItems: \"center\", padding: 5 }}\r\n        >\r\n          <Text style={{ paddingRight: 5 }}>Items/Min</Text>\r\n          <TextInput\r\n            style={{\r\n              width: 75,\r\n              padding: 10,\r\n              borderColor: \"black\",\r\n              borderRadius: 5,\r\n              borderWidth: 1,\r\n              height: 40,\r\n            }}\r\n            keyboardType=\"numeric\"\r\n            onChangeText={(input) => {\r\n              setAmount(Number(input.replace(/[^0-9]./g, \"\")));\r\n            }}\r\n            value={amount.toString()}\r\n          />\r\n          <View style={{ width: 5 }} />\r\n\r\n          <Picker\r\n            style={{\r\n              width: 100,\r\n              padding: 10,\r\n              borderWidth: 1,\r\n              borderColor: \"#666\",\r\n              borderRadius: 5,\r\n              height: 40,\r\n            }}\r\n            selectedValue={currentItem}\r\n            onValueChange={(itemValue, itemIndex) => setCurrentItem(itemValue)}\r\n            itemStyle={{ borderColor: \"red\", borderWidth: 2, borderRadius: 5 }}\r\n          >\r\n            {allItems\r\n              .sort((a, b) => {\r\n                return a.name.localeCompare(b.name);\r\n              })\r\n              .map((data) => {\r\n                return <Picker.Item label={data.name} value={data.name} />;\r\n              })}\r\n          </Picker>\r\n        </View>\r\n      </View>\r\n\r\n      <View\r\n        style={{\r\n          flexDirection: \"row\",\r\n          width: 500,\r\n          alignSelf: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <TouchableOpacity\r\n          style={{\r\n            height: 50,\r\n            width: \"25%\",\r\n            borderColor: \"black\",\r\n            borderRadius: 5,\r\n            borderWidth: 1,\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            backgroundColor: treeView ? \"#D3D3D3\" : \"white\",\r\n          }}\r\n          onPress={() => {\r\n            setTreeView(true);\r\n          }}\r\n        >\r\n          <Text style={{ padding: 5 }}>Tree View</Text>\r\n        </TouchableOpacity>\r\n        <View style={{ width: 5 }} />\r\n        <TouchableOpacity\r\n          style={{\r\n            height: 50,\r\n            width: \"25%\",\r\n            borderColor: \"black\",\r\n            borderRadius: 5,\r\n            borderWidth: 1,\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            backgroundColor: !treeView ? \"#D3D3D3\" : \"white\",\r\n          }}\r\n          onPress={() => {\r\n            setTreeView(false);\r\n          }}\r\n        >\r\n          <Text style={{ padding: 5 }}>Summary View</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      {treeView ? renderList() : renderIngList()}\r\n      <View style={{ height: 50 }} />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: \"100%\",\r\n    height: \"50%\",\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    paddingBottom: 30,\r\n  },\r\n  buildingLevel: {\r\n    paddingLeft: 15,\r\n    paddingRight: 2,\r\n  },\r\n  buildingLevelInput: {\r\n    width: 30,\r\n    padding: 5,\r\n    borderColor: \"black\",\r\n    borderRadius: 5,\r\n    borderWidth: 1,\r\n    height: 30,\r\n  },\r\n});\r\n"],"sourceRoot":""}