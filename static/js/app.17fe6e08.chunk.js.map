{"version":3,"sources":["ItemInfo.tsx","Components/NumericInput.tsx","App.tsx"],"names":["resources","allItems","name","itemsPerMin","building","value","ingredientList","amount","NumbericInput","height","width","incrementButtonStyle","backgroundColor","alignitems","textAlign","decrementButtonStyle","title","onChange","console","log","max","min","showButtons","stepSize","updateOnStateChange","React","useState","lastValue","setLastValue","currentValue","setCurrentValue","getNumericInput","text","length","sanitizedString","hasDecimal","split","forEach","char","includes","Number","toString","useEffect","slice","View","style","alignItems","paddingHorizontal","paddingVertical","Text","flexDirection","justifyContent","TouchableOpacity","borderTopLeftRadius","borderBottomLeftRadius","onPress","TextInput","borderColor","borderWidth","onChangeText","keyboardType","borderRadius","borderBottomRightRadius","borderTopRightRadius","App","treeView","setTreeView","currentItem","setCurrentItem","setAmount","ingredients","setIngredients","workshopLevel","setWorkShopLevel","furnaceLevel","setFurnaceLevel","machineShopLevel","setMachineShopLevel","industrialFactoryLevel","setIndustrialFactoryLevel","forgeLevel","setForgeLevel","manufacturerLevel","setManufacturerLevel","extractorLevel","setExtractorLevel","rawResources","setRawResources","maxItemPerMin","setMaxItemPerMin","woodExtractorAmount","setWoodExtractorAmount","stoneExtractorAmount","setStoneExtractorAmount","ironExtractorAmount","setIronExtractorAmount","copperExtractorAmount","SetCopperExtractorAmount","wolframiteExtractorAmount","setWolframiteExtractorAmount","coalExtractorAmount","setCoalExtractorAmount","ingList","resourceCount","isLoading","setIsLoading","a","async","AsyncStorage","getItem","info","JSON","parse","data","setItem","stringify","ingInfo","find","item","multiplier","levelMultiplier","getBuildingLevel","numberOfBuildings","addIng","GenerateList","amountPerMin","depth","itemInfo","ingredient","requireAmountPerMin","Math","ceil","maxOutput","Infinity","resource","resourceAmount","rawResource","Name","Amount","ipm","outputPerExtractor","level","extractorOutput","toLowerCase","getResourceAmount","toFixed","itemInArray","element","push","Building","padding","flexWrap","fontSize","selectedValue","onValueChange","itemValue","itemIndex","itemStyle","sort","b","localeCompare","map","Item","label","alignSelf","paddingLeft","StyleSheet","create","container","flex","paddingBottom","buildingLevel","paddingRight","buildingLevelInput","inputContainer","lexDirection"],"mappings":"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","file":"static/js/app.17fe6e08.chunk.js","sourcesContent":["export const resources = [\r\n  \"Copper Ore\",\r\n  \"Iron Ore\",\r\n  \"Wood Log\",\r\n  \"Stone\",\r\n  \"Coal\",\r\n  \"Wolframite\",\r\n];\r\n\r\nexport const allItems = [\r\n  {\r\n    name: \"Wood Plank\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Wood Log\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Wood Frame\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Wood Plank\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Copper Wire\",\r\n    itemsPerMin: 30,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 1.5 }],\r\n  },\r\n  {\r\n    name: \"Heat Sink\",\r\n    itemsPerMin: 10,\r\n    building: \"Workshop\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Iron Gear\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Iron Plating\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Steel Rod\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 35,\r\n    ingredientList: [{ name: \"Steel\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Sand\",\r\n    itemsPerMin: 40,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Stone\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Condenser Lens\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 12,\r\n    ingredientList: [{ name: \"Glass\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Carbon Fiber\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Graphite\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Coupler\",\r\n    itemsPerMin: 6,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Tungsten Carbide\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Iron Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Iron Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Copper Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Copper Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Silicone\",\r\n    itemsPerMin: 20,\r\n    building: \"Furnace\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Sand\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Glass\",\r\n    itemsPerMin: 10,\r\n    building: \"Furnace\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Sand\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Tungsten Ore\",\r\n    itemsPerMin: 24,\r\n    building: \"Furnace\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Wolframite\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Electromagnet\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Machine Shop\",\r\n    value: 14,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 6 },\r\n      { name: \"Iron Ingot\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Logic Circuit\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 10,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 3 },\r\n      { name: \"Silicone\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Metal Frame\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Wood Frame\", amount: 1 },\r\n      { name: \"Iron Plating\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Battery\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Machine Shop\",\r\n    value: 150,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Graphite\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Rotor\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Iron Plating\", amount: 2 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Nano Wire\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Glass\", amount: 4 },\r\n      { name: \"Carbon Fiber\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Graphite\",\r\n    itemsPerMin: 15,\r\n    building: \"Forge\",\r\n    value: 6,\r\n    ingredientList: [\r\n      { name: \"Wood Log\", amount: 3 },\r\n      { name: \"Coal\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Steel\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Iron Ore\", amount: 6 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Concrete\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Sand\", amount: 10 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tungsten Carbide\",\r\n    itemsPerMin: 12,\r\n    building: \"Forge\",\r\n    value: 16,\r\n    ingredientList: [\r\n      { name: \"Tungsten Ore\", amount: 2 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Computer\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Industrial Factory\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Heat Sink\", amount: 3 },\r\n      { name: \"Metal Frame\", amount: 1 },\r\n      { name: \"Logic Circuit\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electric Motor\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 4 },\r\n      { name: \"Rotor\", amount: 2 },\r\n      { name: \"Battery\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electron Microscope\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Manufacturer\",\r\n    value: 300,\r\n    ingredientList: [\r\n      { name: \"Condenser Lens\", amount: 4 },\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Turbocharger\",\r\n    itemsPerMin: 4,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 8 },\r\n      { name: \"Logic Circuit\", amount: 4 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n      { name: \"Coupler\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Super Computer\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 2 },\r\n      { name: \"Heat Sink\", amount: 8 },\r\n      { name: \"Turbocharger\", amount: 1 },\r\n      { name: \"Coupler\", amount: 8 },\r\n    ],\r\n  },\r\n  // Items that I have not unlocked myself\r\n  {\r\n    name: \"Atomic Locator\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 24 },\r\n      { name: \"Copper Wire\", amount: 50 },\r\n      { name: \"Electron Microscope\", amount: 2 },\r\n      { name: \"Super Computer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Earth Token\",\r\n    itemsPerMin: 1.428571429,\r\n    building: \"Earth Transporter\",\r\n    value: 250,\r\n    ingredientList: [{ name: \"Matter Duplicator\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Energy Cube\",\r\n    itemsPerMin: 2,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Battery\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Gyroscope\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 12 },\r\n      { name: \"Rotor\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Industrial Frame\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 6 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Tungsten Carbide\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Magnetic Field Generator\",\r\n    itemsPerMin: 1.5,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 10 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n      { name: \"Nano Wire\", amount: 10 },\r\n      { name: \"Stabilizer\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Compressor\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electric Motor\", amount: 2 },\r\n      { name: \"Tank\", amount: 1 },\r\n      { name: \"Turbocharger\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Duplicator\",\r\n    itemsPerMin: 2 / 3,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Atomic Locator\", amount: 4 },\r\n      { name: \"Energy Cube\", amount: 5 },\r\n      { name: \"Particle Glue\", amount: 100 },\r\n      { name: \"Quantum Entangler\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Particle Glue\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Matter Compressor\", amount: 0.1 }\r\n    ],\r\n  },\r\n  {\r\n    name: \"Quantum Entangler\",\r\n    itemsPerMin: 1,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Magnetic Field Generator\", amount: 1 },\r\n      { name: \"Stabilizer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Stabilizer\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 1 },\r\n      { name: \"Electric Motor\", amount: 1 },\r\n      { name: \"Gyroscope\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tank\",\r\n    itemsPerMin: 6,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 4 },\r\n      { name: \"Glass\", amount: 2 },\r\n      { name: \"Tungsten Carbide\", amount: 4 },\r\n    ],\r\n  },\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n  Button,\r\n} from \"react-native\";\r\n\r\nexport default function NumbericInput({\r\n  height = 100,\r\n  width = 100,\r\n  incrementButtonStyle = {\r\n    backgroundColor: \"#FFCCCB\",\r\n    alignitems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  decrementButtonStyle = {\r\n    backgroundColor: \"#90EE90\",\r\n    alignitems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  value = \"0\",\r\n  title = \"\",\r\n  onChange = (value: number) => {\r\n    console.log(value);\r\n  },\r\n  max = 1000000,\r\n  min = 1,\r\n  showButtons = true,\r\n  stepSize = 1,\r\n  updateOnStateChange = false,\r\n  ...otherProps\r\n}) {\r\n  const [lastValue, setLastValue] = React.useState(\"\");\r\n  const [currentValue, setCurrentValue] = React.useState(value);\r\n\r\n  useEffect(() => {\r\n    if (updateOnStateChange) {\r\n      setCurrentValue(value);\r\n    }\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    if (currentValue.slice(-1) != \".\") {\r\n      onChange(Number(currentValue));\r\n    }\r\n  }, [currentValue]);\r\n\r\n  function getNumericInput(text: string) {\r\n    {\r\n      if (text.length == 0 && updateOnStateChange) {\r\n        setLastValue(\"\");\r\n        setCurrentValue(\"0\");\r\n        return;\r\n      }\r\n      let sanitizedString = \"\";\r\n      let hasDecimal = false;\r\n      text.split(\"\").forEach((char) => {\r\n        if (\"1234567890.\".includes(char)) {\r\n          if (char == \".\") {\r\n            if (!hasDecimal) {\r\n              hasDecimal = true;\r\n              sanitizedString += char;\r\n            }\r\n          } else {\r\n            sanitizedString += char;\r\n          }\r\n        }\r\n      });\r\n      if (sanitizedString.length == 0) {\r\n        setCurrentValue(\"\");\r\n        setLastValue(\"\");\r\n        return;\r\n      }\r\n      if (Number(sanitizedString) > max) {\r\n        sanitizedString = max.toString();\r\n      }\r\n      if (Number(sanitizedString) < min) {\r\n        sanitizedString = min.toString();\r\n      }\r\n      if (sanitizedString != lastValue) {\r\n        setCurrentValue(sanitizedString);\r\n        setLastValue(sanitizedString);\r\n      }\r\n    }\r\n  }\r\n\r\n  function plusButton() {\r\n    if (showButtons) {\r\n      return (\r\n        <TouchableOpacity\r\n          style={[\r\n            decrementButtonStyle,\r\n            {\r\n              borderTopLeftRadius: 10,\r\n              borderBottomLeftRadius: 10,\r\n              width: width / 4,\r\n              height: height,\r\n              justifyContent: \"center\",\r\n            },\r\n          ]}\r\n          onPress={() => getNumericInput((Number(value) - stepSize).toString())}\r\n        >\r\n          <Text>-</Text>\r\n        </TouchableOpacity>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function minusButton() {\r\n    if (showButtons) {\r\n      return (\r\n        <TouchableOpacity\r\n          style={[\r\n            incrementButtonStyle,\r\n            {\r\n              borderBottomRightRadius: 10,\r\n              borderTopRightRadius: 10,\r\n              width: width / 4,\r\n              height: height,\r\n              justifyContent: \"center\",\r\n            },\r\n          ]}\r\n          onPress={() => getNumericInput((Number(value) + stepSize).toString())}\r\n        >\r\n          <Text>+</Text>\r\n        </TouchableOpacity>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function textInput() {\r\n    if (showButtons) {\r\n      return (\r\n        <TextInput\r\n          value={currentValue}\r\n          style={{\r\n            width: width / 2,\r\n            textAlign: \"center\",\r\n            borderColor: \"#D3D3D3\",\r\n            borderWidth: 1,\r\n            height: height,\r\n          }}\r\n          onChangeText={(text) => getNumericInput(text)}\r\n          keyboardType=\"numeric\"\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <TextInput\r\n          value={currentValue}\r\n          style={{\r\n            width: width / 2,\r\n            textAlign: \"center\",\r\n            borderColor: \"#D3D3D3\",\r\n            borderWidth: 1,\r\n            height: height,\r\n            borderRadius: 10,\r\n          }}\r\n          onChangeText={(text) => getNumericInput(text)}\r\n          keyboardType=\"numeric\"\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        alignItems: \"center\",\r\n        paddingHorizontal: 10,\r\n        paddingVertical: 5,\r\n      }}\r\n    >\r\n      <Text>{title}</Text>\r\n      <View\r\n        style={{\r\n          width: width,\r\n          height: height,\r\n          alignItems: \"center\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        {plusButton()}\r\n        {textInput()}\r\n        {minusButton()}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n","// https://www.npmjs.com/package/react-native-numeric-input\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\r\nimport { allItems, resources } from \"./ItemInfo\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nimport NumericInput from \"./Components/NumericInput\";\r\n\r\nexport default function App() {\r\n  interface Ingredient {\r\n    name: string;\r\n    amount: number;\r\n    depth: number;\r\n    numberOfBuildings: number;\r\n    building: string;\r\n  }\r\n\r\n  interface Resources {\r\n    Name: string;\r\n    Amount: number;\r\n    Building: string;\r\n  }\r\n\r\n  const [treeView, setTreeView] = useState(true);\r\n  const [currentItem, setCurrentItem] = useState(\"Wood Plank\");\r\n  const [amount, setAmount] = useState(1);\r\n  const [ingredients, setIngredients] = useState<Ingredient[]>([]);\r\n  const [workshopLevel, setWorkShopLevel] = useState(1);\r\n  const [furnaceLevel, setFurnaceLevel] = useState(1);\r\n  const [machineShopLevel, setMachineShopLevel] = useState(1);\r\n  const [industrialFactoryLevel, setIndustrialFactoryLevel] = useState(1);\r\n  const [forgeLevel, setForgeLevel] = useState(1);\r\n  const [manufacturerLevel, setManufacturerLevel] = useState(1);\r\n  const [extractorLevel, setExtractorLevel] = useState(1);\r\n  const [rawResources, setRawResources] = useState<Resources[]>([]);\r\n\r\n  const [maxItemPerMin, setMaxItemPerMin] = useState(0);\r\n  const [woodExtractorAmount, setWoodExtractorAmount] = useState(50);\r\n  const [stoneExtractorAmount, setStoneExtractorAmount] = useState(50);\r\n  const [ironExtractorAmount, setIronExtractorAmount] = useState(50);\r\n  const [copperExtractorAmount, SetCopperExtractorAmount] = useState(50);\r\n  const [wolframiteExtractorAmount, setWolframiteExtractorAmount] =\r\n    useState(50);\r\n  const [coalExtractorAmount, setCoalExtractorAmount] = useState(50);\r\n\r\n  var ingList: Ingredient[] = [];\r\n  var resourceCount: Resources[] = [];\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Onload\r\n  useEffect(() => {\r\n    console.log(\"getting data\");\r\n    (async () => {\r\n      try {\r\n        const value = await AsyncStorage.getItem(\"@info\");\r\n        if (value !== null) {\r\n          const info = JSON.parse(value);\r\n          console.log(info);\r\n          setWoodExtractorAmount(\r\n            info.woodExtractorAmount !== null ? info.woodExtractorAmount : 50\r\n          );\r\n          setStoneExtractorAmount(\r\n            info.stoneExtractorAmount !== null ? info.stoneExtractorAmount : 50\r\n          );\r\n          setIronExtractorAmount(\r\n            info.ironExtractorAmount !== null ? info.ironExtractorAmount : 50\r\n          );\r\n          SetCopperExtractorAmount(\r\n            info.copperExtractorAmount !== null\r\n              ? info.copperExtractorAmount\r\n              : 50\r\n          );\r\n          setWolframiteExtractorAmount(\r\n            info.wolframiteExtractorAmount !== null\r\n              ? info.wolframiteExtractorAmount\r\n              : 50\r\n          );\r\n          setCoalExtractorAmount(\r\n            info.coalExtractorAmount !== null ? info.coalExtractorAmount : 50\r\n          );\r\n          setWorkShopLevel(\r\n            info.workshopLevel !== null ? info.workshopLevel : 1\r\n          );\r\n          setFurnaceLevel(info.furnaceLevel !== null ? info.furnaceLevel : 1);\r\n          setMachineShopLevel(\r\n            info.machineShopLevel !== null ? info.machineShopLevel : 1\r\n          );\r\n          setIndustrialFactoryLevel(\r\n            info.industrialFactoryLevel !== null\r\n              ? info.industrialFactoryLevel\r\n              : 1\r\n          );\r\n          setForgeLevel(info.forgeLevel !== null ? info.forgeLevel : 1);\r\n          setManufacturerLevel(\r\n            info.manufacturerLevel !== null ? info.manufacturerLevel : 1\r\n          );\r\n          setExtractorLevel(\r\n            info.extractorLevel !== null ? info.extractorLevel : 1\r\n          );\r\n        }\r\n      } catch (e) {\r\n        console.log(\"Error: \" + e);\r\n      }\r\n      setIsLoading(false);\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      console.log(\"Still loading\");\r\n      return;\r\n    }\r\n    console.log(\"Saving info\");\r\n    const data = {\r\n      woodExtractorAmount: woodExtractorAmount,\r\n      stoneExtractorAmount: stoneExtractorAmount,\r\n      ironExtractorAmount: ironExtractorAmount,\r\n      copperExtractorAmount: copperExtractorAmount,\r\n      wolframiteExtractorAmount: wolframiteExtractorAmount,\r\n      coalExtractorAmount: coalExtractorAmount,\r\n      extractorLevel: extractorLevel,\r\n      workshopLevel: workshopLevel,\r\n      furnaceLevel: furnaceLevel,\r\n      machineShopLevel: machineShopLevel,\r\n      industrialFactoryLevel: industrialFactoryLevel,\r\n      forgeLevel: forgeLevel,\r\n      manufacturerLevel: manufacturerLevel,\r\n    };\r\n\r\n    (async () => {\r\n      try {\r\n        console.log(data);\r\n        await AsyncStorage.setItem(\"@info\", JSON.stringify(data));\r\n      } catch (e) {\r\n        console.log(\"Error saving data \" + e);\r\n      }\r\n    })();\r\n  }),\r\n    [\r\n      woodExtractorAmount,\r\n      stoneExtractorAmount,\r\n      ironExtractorAmount,\r\n      copperExtractorAmount,\r\n      wolframiteExtractorAmount,\r\n      coalExtractorAmount,\r\n      extractorLevel,\r\n      workshopLevel,\r\n      furnaceLevel,\r\n      machineShopLevel,\r\n      industrialFactoryLevel,\r\n      forgeLevel,\r\n      manufacturerLevel,\r\n    ];\r\n\r\n  // If any params are updated then we want to recalculate the list\r\n  useEffect(() => {\r\n    ingList = [];\r\n    resourceCount = [];\r\n\r\n    const ingInfo = allItems.find((item) => {\r\n      return item.name == currentItem;\r\n    });\r\n\r\n    const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n    const multiplier = levelMultiplier(buildingLevel!);\r\n    const numberOfBuildings = amount / ingInfo!.itemsPerMin / multiplier;\r\n\r\n    var building = ingInfo!.building;\r\n    addIng(currentItem, amount, 0, numberOfBuildings, building);\r\n    GenerateList(currentItem, amount);\r\n    setIngredients(ingList);\r\n    setRawResources(resourceCount);\r\n  }, [\r\n    workshopLevel,\r\n    furnaceLevel,\r\n    machineShopLevel,\r\n    industrialFactoryLevel,\r\n    forgeLevel,\r\n    manufacturerLevel,\r\n    extractorLevel,\r\n    amount,\r\n    currentItem,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    let maxOutput = Infinity;\r\n    resources.forEach((resource) => {\r\n      let resourceAmount = 0;\r\n      rawResources.forEach((rawResource) => {\r\n        if (rawResource.Name == resource) {\r\n          resourceAmount = rawResource.Amount;\r\n        }\r\n      });\r\n\r\n      if (resourceAmount > 0) {\r\n        let ipm = getResourceAmount(resource) / resourceAmount;\r\n        if (ipm < maxOutput) {\r\n          maxOutput = ipm;\r\n        }\r\n      }\r\n    });\r\n\r\n    setMaxItemPerMin(Number((maxOutput * amount).toFixed(4)));\r\n  }, [\r\n    rawResources,\r\n    woodExtractorAmount,\r\n    stoneExtractorAmount,\r\n    ironExtractorAmount,\r\n    copperExtractorAmount,\r\n    wolframiteExtractorAmount,\r\n    coalExtractorAmount,\r\n  ]);\r\n\r\n  const addIng = (\r\n    name: string,\r\n    amount: number,\r\n    depth: number,\r\n    numberOfBuildings: number,\r\n    building: string\r\n  ) => {\r\n    // Add to the sum list\r\n    var itemInArray = false;\r\n    resourceCount.forEach((element) => {\r\n      if (element.Name == name) {\r\n        element.Amount += amount;\r\n        itemInArray = true;\r\n      }\r\n    });\r\n\r\n    if (!itemInArray) {\r\n      resourceCount.push({\r\n        Name: name,\r\n        Amount: amount,\r\n        Building: building,\r\n      });\r\n    }\r\n\r\n    ingList.push({\r\n      name: name,\r\n      amount: amount,\r\n      depth: depth,\r\n      numberOfBuildings: Math.ceil(numberOfBuildings),\r\n      building: building,\r\n    });\r\n  };\r\n\r\n  function extractorOutput(level: number) {\r\n    switch (level) {\r\n      case 1:\r\n        return 7.5;\r\n      case 2:\r\n        return 11.25;\r\n      case 3:\r\n        return 15;\r\n      case 4:\r\n        return 22.5;\r\n      case 5:\r\n        return 30;\r\n      default:\r\n        return 7.5;\r\n    }\r\n  }\r\n\r\n  function getResourceAmount(name: string) {\r\n    let outputPerExtractor = Number(\r\n      extractorOutput(getBuildingLevel(\"extractor\"))\r\n    );\r\n    switch (name.toLowerCase()) {\r\n      case \"wood log\":\r\n        return outputPerExtractor * woodExtractorAmount;\r\n      case \"stone\":\r\n        return outputPerExtractor * stoneExtractorAmount;\r\n      case \"iron ore\":\r\n        return outputPerExtractor * ironExtractorAmount;\r\n      case \"copper ore\":\r\n        return outputPerExtractor * copperExtractorAmount;\r\n      case \"wolframite\":\r\n        return outputPerExtractor * wolframiteExtractorAmount;\r\n      case \"coal\":\r\n        return outputPerExtractor * coalExtractorAmount;\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  function getBuildingLevel(name: string) {\r\n    switch (name.toLowerCase()) {\r\n      case \"workshop\":\r\n        return workshopLevel;\r\n      case \"furnace\":\r\n        return furnaceLevel;\r\n      case \"machine shop\":\r\n        return machineShopLevel;\r\n      case \"industrial factory\":\r\n        return industrialFactoryLevel;\r\n      case \"forge\":\r\n        return forgeLevel;\r\n      case \"manufacturer\":\r\n        return manufacturerLevel;\r\n      case \"extractor\":\r\n        return extractorLevel;\r\n      case \"earth transporter\":\r\n        return 1;\r\n      default:\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function levelMultiplier(level: number) {\r\n    switch (level) {\r\n      case 1:\r\n        return 1;\r\n      case 2:\r\n        return 1.5;\r\n      case 3:\r\n        return 2;\r\n      case 4:\r\n        return 3;\r\n      case 5:\r\n        return 4;\r\n      default:\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function GenerateList(name: string, amountPerMin = 1, depth = 1) {\r\n    const itemInfo = allItems.find((item) => {\r\n      return item.name == name;\r\n    });\r\n\r\n    itemInfo?.ingredientList.forEach((ingredient) => {\r\n      const requireAmountPerMin = ingredient.amount * amountPerMin;\r\n      const buildingLevel = getBuildingLevel(\"extractor\");\r\n      const multiplier = levelMultiplier(buildingLevel!);\r\n      const numberOfBuildings = Math.ceil(\r\n        requireAmountPerMin / (7.5 * multiplier)\r\n      );\r\n      if (resources.includes(ingredient.name)) {\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          \"Extractor\"\r\n        );\r\n      } else {\r\n        const ingInfo = allItems.find((item) => {\r\n          return item.name == ingredient.name;\r\n        });\r\n        const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n        const multiplier = levelMultiplier(buildingLevel!);\r\n        const numberOfBuildings =\r\n          requireAmountPerMin / ingInfo!.itemsPerMin / multiplier;\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          ingInfo!.building\r\n        );\r\n        GenerateList(ingredient.name, requireAmountPerMin, depth + 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  function renderList() {\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {ingredients.map((data) => {\r\n          if (data.amount == 0) {\r\n            return null;\r\n          }\r\n          return (\r\n            <Text style={{ paddingLeft: data.depth * 10 }}>\r\n              {data.amount.toFixed(2)} {data.name} ({data.numberOfBuildings}{\" \"}\r\n              {data.building})\r\n            </Text>\r\n          );\r\n        })}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  // We should give these elements an id\r\n  function renderIngList() {\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {rawResources\r\n          .sort((a, b) => {\r\n            return a.Name.localeCompare(b.Name);\r\n          })\r\n          .map((data) => {\r\n            var itemsPerMin = 0;\r\n            if (resources.includes(data.Name)) {\r\n              itemsPerMin =\r\n                7.5 * levelMultiplier(getBuildingLevel(\"extractor\")!);\r\n            } else {\r\n              const ingInfo = allItems.find((item) => {\r\n                return item.name == data.Name;\r\n              });\r\n              itemsPerMin = ingInfo!.itemsPerMin;\r\n            }\r\n\r\n            const buildingLevel = getBuildingLevel(data.Building);\r\n\r\n            const multiplier = levelMultiplier(buildingLevel!);\r\n            const numberOfBuildings = data.Amount / itemsPerMin / multiplier;\r\n            return (\r\n              <Text>\r\n                {data.Name}: {data.Amount.toFixed(2)} (\r\n                {Math.ceil(numberOfBuildings)} {data.Building})\r\n              </Text>\r\n            );\r\n          })}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  function enterTotalExtractorAmount() {\r\n    return (\r\n      <View\r\n        style={{\r\n          flexDirection: \"row\",\r\n          alignItems: \"center\",\r\n          padding: 5,\r\n          flexWrap: \"wrap\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <NumericInput\r\n          title={\"Wood Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={woodExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setWoodExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Stone Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={stoneExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setStoneExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Copper Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={copperExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            SetCopperExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Iron Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={ironExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setIronExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Coal Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={coalExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setCoalExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Wolframite Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={wolframiteExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setWolframiteExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n  if (!isLoading) {\r\n    return (\r\n      <View style={{ alignItems: \"center\" }}>\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            padding: 5,\r\n            flexWrap: \"wrap\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <NumericInput\r\n            title={\"Extractor\"}\r\n            width={100}\r\n            height={30}\r\n            value={extractorLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setExtractorLevel(value);\r\n            }}\r\n            max={5}\r\n          />\r\n          <NumericInput\r\n            title={\"Workshop\"}\r\n            width={100}\r\n            height={30}\r\n            value={workshopLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setWorkShopLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Furnace\"}\r\n            width={100}\r\n            height={30}\r\n            value={furnaceLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setFurnaceLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Machine Shop\"}\r\n            width={100}\r\n            height={30}\r\n            value={machineShopLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setMachineShopLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Industrial Factory\"}\r\n            width={100}\r\n            height={30}\r\n            value={industrialFactoryLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setIndustrialFactoryLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Forge\"}\r\n            width={100}\r\n            height={30}\r\n            value={forgeLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setForgeLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Manufacturer\"}\r\n            width={100}\r\n            height={30}\r\n            value={manufacturerLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setManufacturerLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n        </View>\r\n        {enterTotalExtractorAmount()}\r\n\r\n        <View style={{ alignItems: \"center\" }}>\r\n          <View\r\n            style={{ flexDirection: \"row\", alignItems: \"center\", padding: 10 }}\r\n          >\r\n            <View>\r\n              <Text>Max Output</Text>\r\n              <TouchableOpacity\r\n                style={{\r\n                  height: 45,\r\n                  width: 100,\r\n                  borderColor: \"black\",\r\n                  borderRadius: 5,\r\n                  borderWidth: 1,\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n                onPress={() => setAmount(maxItemPerMin)}\r\n              >\r\n                <Text style={{ fontSize: 8 }}>(Press Me)</Text>\r\n                <Text>{maxItemPerMin.toFixed(2)}</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n            <NumericInput\r\n              title={\"Items/Min\"}\r\n              width={250}\r\n              height={45}\r\n              value={amount.toString()}\r\n              onChange={(value: number) => {\r\n                setAmount(value);\r\n              }}\r\n              max={10000}\r\n              showButtons={false}\r\n              updateOnStateChange={true}\r\n            />\r\n            <View style={{ width: 5 }} />\r\n\r\n            <Picker\r\n              style={{\r\n                width: 100,\r\n                padding: 10,\r\n                borderWidth: 1,\r\n                borderColor: \"#666\",\r\n                borderRadius: 5,\r\n                height: 40,\r\n              }}\r\n              selectedValue={currentItem}\r\n              onValueChange={(itemValue, itemIndex) =>\r\n                setCurrentItem(itemValue)\r\n              }\r\n              itemStyle={{\r\n                borderColor: \"red\",\r\n                borderWidth: 2,\r\n                borderRadius: 5,\r\n              }}\r\n            >\r\n              {allItems\r\n                .sort((a, b) => {\r\n                  return a.name.localeCompare(b.name);\r\n                })\r\n                .map((data) => {\r\n                  return <Picker.Item label={data.name} value={data.name} />;\r\n                })}\r\n            </Picker>\r\n          </View>\r\n        </View>\r\n\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            width: 500,\r\n            alignSelf: \"center\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <TouchableOpacity\r\n            style={{\r\n              height: 50,\r\n              width: \"25%\",\r\n              borderColor: \"black\",\r\n              borderRadius: 5,\r\n              borderWidth: 1,\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              backgroundColor: treeView ? \"#D3D3D3\" : \"white\",\r\n            }}\r\n            onPress={() => {\r\n              setTreeView(true);\r\n            }}\r\n          >\r\n            <Text style={{ padding: 5 }}>Tree View</Text>\r\n          </TouchableOpacity>\r\n          <View style={{ width: 5 }} />\r\n          <TouchableOpacity\r\n            style={{\r\n              height: 50,\r\n              width: \"25%\",\r\n              borderColor: \"black\",\r\n              borderRadius: 5,\r\n              borderWidth: 1,\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              backgroundColor: !treeView ? \"#D3D3D3\" : \"white\",\r\n            }}\r\n            onPress={() => {\r\n              setTreeView(false);\r\n            }}\r\n          >\r\n            <Text style={{ padding: 5 }}>Summary View</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n        {treeView ? renderList() : renderIngList()}\r\n        <View style={{ height: 50 }} />\r\n      </View>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: \"100%\",\r\n    height: \"50%\",\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    paddingBottom: 30,\r\n  },\r\n  buildingLevel: {\r\n    paddingLeft: 15,\r\n    paddingRight: 2,\r\n  },\r\n  buildingLevelInput: {\r\n    width: 30,\r\n    padding: 5,\r\n    borderColor: \"black\",\r\n    borderRadius: 5,\r\n    borderWidth: 1,\r\n    height: 30,\r\n  },\r\n  inputContainer: {\r\n    lexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    padding: 5,\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n"],"sourceRoot":""}