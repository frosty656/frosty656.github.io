{"version":3,"sources":["ItemInfo.tsx","Components/NumericInput.tsx","App.tsx"],"names":["resources","allItems","name","itemsPerMin","building","value","ingredientList","amount","NumbericInput","height","width","incrementButtonStyle","backgroundColor","alignitems","textAlign","decrementButtonStyle","title","onChange","console","log","max","min","showButtons","stepSize","updateOnStateChange","allowDecimal","React","useState","lastValue","setLastValue","currentValue","setCurrentValue","getNumericInput","text","replaceAll","length","sanitizedString","hasDecimal","split","forEach","char","includes","Number","toString","useEffect","slice","View","style","alignItems","paddingHorizontal","paddingVertical","Text","flexDirection","justifyContent","TouchableOpacity","borderTopLeftRadius","borderBottomLeftRadius","onPress","TextInput","borderColor","borderWidth","onChangeText","keyboardType","borderRadius","borderBottomRightRadius","borderTopRightRadius","App","treeView","setTreeView","currentItem","setCurrentItem","setAmount","ingredients","setIngredients","rawResources","setRawResources","workshopLevel","setWorkShopLevel","furnaceLevel","setFurnaceLevel","machineShopLevel","setMachineShopLevel","industrialFactoryLevel","setIndustrialFactoryLevel","forgeLevel","setForgeLevel","manufacturerLevel","setManufacturerLevel","extractorLevel","setExtractorLevel","beltIPM","setBeltIPM","maxItemPerMin","setMaxItemPerMin","woodExtractorAmount","setWoodExtractorAmount","stoneExtractorAmount","setStoneExtractorAmount","ironExtractorAmount","setIronExtractorAmount","copperExtractorAmount","SetCopperExtractorAmount","wolframiteExtractorAmount","setWolframiteExtractorAmount","coalExtractorAmount","setCoalExtractorAmount","ingList","resourceCount","isLoading","setIsLoading","a","async","AsyncStorage","getItem","info","JSON","parse","data","setItem","stringify","ingInfo","find","item","multiplier","levelMultiplier","getBuildingLevel","numberOfBuildings","addIng","GenerateList","amountPerMin","depth","itemInfo","ingredient","requireAmountPerMin","buildingLevel","toFixed","maxOutput","Infinity","resource","resourceAmount","rawResource","Name","Amount","ipm","outputPerExtractor","level","extractorOutput","toLowerCase","getResourceAmount","itemInArray","element","push","Building","padding","flexWrap","fontSize","selectedValue","onValueChange","itemValue","itemIndex","itemStyle","sort","b","localeCompare","map","Item","label","alignSelf","paddingLeft","StyleSheet","create","container","flex","paddingBottom","paddingRight","buildingLevelInput","inputContainer","lexDirection"],"mappings":"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","file":"static/js/app.85b97746.chunk.js","sourcesContent":["export const resources = [\r\n  \"Copper Ore\",\r\n  \"Iron Ore\",\r\n  \"Wood Log\",\r\n  \"Stone\",\r\n  \"Coal\",\r\n  \"Wolframite\",\r\n];\r\n\r\nexport const allItems = [\r\n  {\r\n    name: \"Wood Plank\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Wood Log\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Wood Frame\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Wood Plank\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Copper Wire\",\r\n    itemsPerMin: 30,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 1.5 }],\r\n  },\r\n  {\r\n    name: \"Heat Sink\",\r\n    itemsPerMin: 10,\r\n    building: \"Workshop\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Iron Gear\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Iron Plating\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Steel Rod\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 35,\r\n    ingredientList: [{ name: \"Steel\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Sand\",\r\n    itemsPerMin: 40,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Stone\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Condenser Lens\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 12,\r\n    ingredientList: [{ name: \"Glass\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Carbon Fiber\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Graphite\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Coupler\",\r\n    itemsPerMin: 6,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Tungsten Carbide\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Iron Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Iron Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Copper Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Copper Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Silicone\",\r\n    itemsPerMin: 20,\r\n    building: \"Furnace\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Sand\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Glass\",\r\n    itemsPerMin: 10,\r\n    building: \"Furnace\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Sand\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Tungsten Ore\",\r\n    itemsPerMin: 24,\r\n    building: \"Furnace\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Wolframite\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Electromagnet\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Machine Shop\",\r\n    value: 14,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 6 },\r\n      { name: \"Iron Ingot\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Logic Circuit\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 10,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 3 },\r\n      { name: \"Silicone\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Metal Frame\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Wood Frame\", amount: 1 },\r\n      { name: \"Iron Plating\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Battery\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Machine Shop\",\r\n    value: 150,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Graphite\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Rotor\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Iron Plating\", amount: 2 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Nano Wire\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Glass\", amount: 4 },\r\n      { name: \"Carbon Fiber\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Graphite\",\r\n    itemsPerMin: 15,\r\n    building: \"Forge\",\r\n    value: 6,\r\n    ingredientList: [\r\n      { name: \"Wood Log\", amount: 3 },\r\n      { name: \"Coal\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Steel\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Iron Ore\", amount: 6 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Concrete\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Sand\", amount: 10 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tungsten Carbide\",\r\n    itemsPerMin: 12,\r\n    building: \"Forge\",\r\n    value: 16,\r\n    ingredientList: [\r\n      { name: \"Tungsten Ore\", amount: 2 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Computer\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Industrial Factory\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Heat Sink\", amount: 3 },\r\n      { name: \"Metal Frame\", amount: 1 },\r\n      { name: \"Logic Circuit\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electric Motor\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 4 },\r\n      { name: \"Rotor\", amount: 2 },\r\n      { name: \"Battery\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electron Microscope\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Manufacturer\",\r\n    value: 300,\r\n    ingredientList: [\r\n      { name: \"Condenser Lens\", amount: 4 },\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Turbocharger\",\r\n    itemsPerMin: 4,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 8 },\r\n      { name: \"Logic Circuit\", amount: 4 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n      { name: \"Coupler\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Super Computer\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 2 },\r\n      { name: \"Heat Sink\", amount: 8 },\r\n      { name: \"Turbocharger\", amount: 1 },\r\n      { name: \"Coupler\", amount: 8 },\r\n    ],\r\n  },\r\n  // Items that I have not unlocked myself\r\n  {\r\n    name: \"Atomic Locator\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 24 },\r\n      { name: \"Copper Wire\", amount: 50 },\r\n      { name: \"Electron Microscope\", amount: 2 },\r\n      { name: \"Super Computer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Earth Token\",\r\n    itemsPerMin: 1.428571429,\r\n    building: \"Earth Transporter\",\r\n    value: 250,\r\n    ingredientList: [{ name: \"Matter Duplicator\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Energy Cube\",\r\n    itemsPerMin: 2,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Battery\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Gyroscope\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 12 },\r\n      { name: \"Rotor\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Industrial Frame\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 6 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Tungsten Carbide\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Magnetic Field Generator\",\r\n    itemsPerMin: 1.5,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 10 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n      { name: \"Nano Wire\", amount: 10 },\r\n      { name: \"Stabilizer\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Compressor\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electric Motor\", amount: 2 },\r\n      { name: \"Tank\", amount: 1 },\r\n      { name: \"Turbocharger\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Duplicator\",\r\n    itemsPerMin: 2 / 3,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Atomic Locator\", amount: 4 },\r\n      { name: \"Energy Cube\", amount: 5 },\r\n      { name: \"Particle Glue\", amount: 100 },\r\n      { name: \"Quantum Entangler\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Particle Glue\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Matter Compressor\", amount: 0.1 }\r\n    ],\r\n  },\r\n  {\r\n    name: \"Quantum Entangler\",\r\n    itemsPerMin: 1,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Magnetic Field Generator\", amount: 1 },\r\n      { name: \"Stabilizer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Stabilizer\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 1 },\r\n      { name: \"Electric Motor\", amount: 1 },\r\n      { name: \"Gyroscope\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tank\",\r\n    itemsPerMin: 6,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 4 },\r\n      { name: \"Glass\", amount: 2 },\r\n      { name: \"Tungsten Carbide\", amount: 4 },\r\n    ],\r\n  },\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n  Button,\r\n} from \"react-native\";\r\n\r\nexport default function NumbericInput({\r\n  height = 100,\r\n  width = 100,\r\n  incrementButtonStyle = {\r\n    backgroundColor: \"#FFCCCB\",\r\n    alignitems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  decrementButtonStyle = {\r\n    backgroundColor: \"#90EE90\",\r\n    alignitems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  value = \"0\",\r\n  title = \"\",\r\n  onChange = (value: number) => {\r\n    console.log(value);\r\n  },\r\n  max = 1000000,\r\n  min = 1,\r\n  showButtons = true,\r\n  stepSize = 1,\r\n  updateOnStateChange = false,\r\n  allowDecimal = false,\r\n  ...otherProps\r\n}) {\r\n  const [lastValue, setLastValue] = React.useState(\"\");\r\n  const [currentValue, setCurrentValue] = React.useState(value);\r\n\r\n  useEffect(() => {\r\n    if (updateOnStateChange) {\r\n      setCurrentValue(value);\r\n    }\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    if (currentValue.slice(-1) != \".\") {\r\n      onChange(Number(currentValue));\r\n    }\r\n  }, [currentValue]);\r\n\r\n  function getNumericInput(text: string) {\r\n    {\r\n      text = text.replaceAll(\",\", \".\");\r\n      if (text.length == 0 && updateOnStateChange) {\r\n        setLastValue(\"\");\r\n        setCurrentValue(\"0\");\r\n        return;\r\n      }\r\n      console.log(text);\r\n      let sanitizedString = \"\";\r\n      let hasDecimal = false;\r\n      text.split(\"\").forEach((char) => {\r\n        if (\"1234567890.\".includes(char)) {\r\n          if (char == \".\") {\r\n            if (!hasDecimal && allowDecimal) {\r\n              hasDecimal = true;\r\n              sanitizedString += char;\r\n            }\r\n          } else {\r\n            sanitizedString += char;\r\n          }\r\n        }\r\n      });\r\n      if (sanitizedString.length == 0) {\r\n        setCurrentValue(\"\");\r\n        setLastValue(\"\");\r\n        return;\r\n      }\r\n      if (Number(sanitizedString) > max) {\r\n        sanitizedString = max.toString();\r\n      }\r\n      if (Number(sanitizedString) < min) {\r\n        sanitizedString = min.toString();\r\n      }\r\n      console.log(sanitizedString);\r\n      if (sanitizedString != lastValue) {\r\n        setCurrentValue(sanitizedString);\r\n        setLastValue(sanitizedString);\r\n      }\r\n    }\r\n  }\r\n\r\n  function plusButton() {\r\n    if (showButtons) {\r\n      return (\r\n        <TouchableOpacity\r\n          style={[\r\n            decrementButtonStyle,\r\n            {\r\n              borderTopLeftRadius: 10,\r\n              borderBottomLeftRadius: 10,\r\n              width: width / 4,\r\n              height: height,\r\n              justifyContent: \"center\",\r\n            },\r\n          ]}\r\n          onPress={() => getNumericInput((Number(value) - stepSize).toString())}\r\n        >\r\n          <Text>-</Text>\r\n        </TouchableOpacity>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function minusButton() {\r\n    if (showButtons) {\r\n      return (\r\n        <TouchableOpacity\r\n          style={[\r\n            incrementButtonStyle,\r\n            {\r\n              borderBottomRightRadius: 10,\r\n              borderTopRightRadius: 10,\r\n              width: width / 4,\r\n              height: height,\r\n              justifyContent: \"center\",\r\n            },\r\n          ]}\r\n          onPress={() => getNumericInput((Number(value) + stepSize).toString())}\r\n        >\r\n          <Text>+</Text>\r\n        </TouchableOpacity>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function textInput() {\r\n    if (showButtons) {\r\n      return (\r\n        <TextInput\r\n          value={currentValue}\r\n          style={{\r\n            width: width / 2,\r\n            textAlign: \"center\",\r\n            borderColor: \"#D3D3D3\",\r\n            borderWidth: 1,\r\n            height: height,\r\n          }}\r\n          onChangeText={(text) => getNumericInput(text)}\r\n          keyboardType=\"numeric\"\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <TextInput\r\n          value={currentValue}\r\n          style={{\r\n            width: width,\r\n            textAlign: \"center\",\r\n            borderColor: \"#D3D3D3\",\r\n            borderWidth: 1,\r\n            height: height,\r\n            borderRadius: 10,\r\n          }}\r\n          onChangeText={(text) => getNumericInput(text)}\r\n          keyboardType={allowDecimal ? \"decimal-pad\" : \"numeric\"}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        alignItems: \"center\",\r\n        paddingHorizontal: 10,\r\n        paddingVertical: 5,\r\n      }}\r\n    >\r\n      <Text>{title}</Text>\r\n      <View\r\n        style={{\r\n          width: width,\r\n          height: height,\r\n          alignItems: \"center\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        {plusButton()}\r\n        {textInput()}\r\n        {minusButton()}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n","// https://www.npmjs.com/package/react-native-numeric-input\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\r\nimport { allItems, resources } from \"./ItemInfo\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nimport NumericInput from \"./Components/NumericInput\";\r\n\r\n// Test commit for jenkins\r\n\r\nexport default function App() {\r\n  interface Ingredient {\r\n    name: string;\r\n    amount: number;\r\n    depth: number;\r\n    numberOfBuildings: number;\r\n    building: string;\r\n  }\r\n\r\n  interface Resources {\r\n    Name: string;\r\n    Amount: number;\r\n    Building: string;\r\n  }\r\n  const [treeView, setTreeView] = useState(true);\r\n  const [currentItem, setCurrentItem] = useState(\"Wood Plank\");\r\n  const [amount, setAmount] = useState(1);\r\n  const [ingredients, setIngredients] = useState<Ingredient[]>([]);\r\n  const [rawResources, setRawResources] = useState<Resources[]>([]);\r\n\r\n  const [workshopLevel, setWorkShopLevel] = useState(1);\r\n  const [furnaceLevel, setFurnaceLevel] = useState(1);\r\n  const [machineShopLevel, setMachineShopLevel] = useState(1);\r\n  const [industrialFactoryLevel, setIndustrialFactoryLevel] = useState(1);\r\n  const [forgeLevel, setForgeLevel] = useState(1);\r\n  const [manufacturerLevel, setManufacturerLevel] = useState(1);\r\n  const [extractorLevel, setExtractorLevel] = useState(1);\r\n  const [beltIPM, setBeltIPM] = useState(420);\r\n\r\n  const [maxItemPerMin, setMaxItemPerMin] = useState(0);\r\n  const [woodExtractorAmount, setWoodExtractorAmount] = useState(50);\r\n  const [stoneExtractorAmount, setStoneExtractorAmount] = useState(50);\r\n  const [ironExtractorAmount, setIronExtractorAmount] = useState(50);\r\n  const [copperExtractorAmount, SetCopperExtractorAmount] = useState(50);\r\n  const [wolframiteExtractorAmount, setWolframiteExtractorAmount] =\r\n    useState(50);\r\n  const [coalExtractorAmount, setCoalExtractorAmount] = useState(50);\r\n\r\n  var ingList: Ingredient[] = [];\r\n  var resourceCount: Resources[] = [];\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Onload\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const value = await AsyncStorage.getItem(\"@info\");\r\n        if (value !== null) {\r\n          const info = JSON.parse(value);\r\n          setWoodExtractorAmount(info.woodExtractorAmount ?? 50);\r\n          setStoneExtractorAmount(info.stoneExtractorAmount ?? 50);\r\n          setIronExtractorAmount(info.ironExtractorAmount ?? 50);\r\n          SetCopperExtractorAmount(info.copperExtractorAmount ?? 50);\r\n          setWolframiteExtractorAmount(info.wolframiteExtractorAmount ?? 50);\r\n          setCoalExtractorAmount(info.coalExtractorAmount ?? 50);\r\n          setWorkShopLevel(info.workshopLevel ?? 1);\r\n          setFurnaceLevel(info.furnaceLevel ?? 1);\r\n          setMachineShopLevel(info.machineShopLevel ?? 1);\r\n          setIndustrialFactoryLevel(info.industrialFactoryLevel ?? 1);\r\n          setForgeLevel(info.forgeLevel ?? 1);\r\n          setManufacturerLevel(info.manufacturerLevel ?? 1);\r\n          setExtractorLevel(info.extractorLevel ?? 1);\r\n          setAmount(info.amount ?? 1);\r\n          setCurrentItem(info.currentItem ?? \"Wood Plank\");\r\n          setBeltIPM(info.beltIPM ?? 420);\r\n\r\n        }\r\n      } catch (e) {\r\n        console.log(\"Error: \" + e);\r\n      }\r\n      setIsLoading(false);\r\n    })();\r\n  }, []);\r\n\r\n  // Onsave\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      return;\r\n    }\r\n    const data = {\r\n      woodExtractorAmount: woodExtractorAmount,\r\n      stoneExtractorAmount: stoneExtractorAmount,\r\n      ironExtractorAmount: ironExtractorAmount,\r\n      copperExtractorAmount: copperExtractorAmount,\r\n      wolframiteExtractorAmount: wolframiteExtractorAmount,\r\n      coalExtractorAmount: coalExtractorAmount,\r\n      extractorLevel: extractorLevel,\r\n      workshopLevel: workshopLevel,\r\n      furnaceLevel: furnaceLevel,\r\n      machineShopLevel: machineShopLevel,\r\n      industrialFactoryLevel: industrialFactoryLevel,\r\n      forgeLevel: forgeLevel,\r\n      manufacturerLevel: manufacturerLevel,\r\n      amount: amount,\r\n      currentItem: currentItem,\r\n      beltIPM: beltIPM,\r\n\r\n    };\r\n\r\n    (async () => {\r\n      try {\r\n        await AsyncStorage.setItem(\"@info\", JSON.stringify(data));\r\n      } catch (e) {\r\n        console.log(\"Error saving data \" + e);\r\n      }\r\n    })();\r\n  }),\r\n    [\r\n      woodExtractorAmount,\r\n      stoneExtractorAmount,\r\n      ironExtractorAmount,\r\n      copperExtractorAmount,\r\n      wolframiteExtractorAmount,\r\n      coalExtractorAmount,\r\n      extractorLevel,\r\n      workshopLevel,\r\n      furnaceLevel,\r\n      machineShopLevel,\r\n      industrialFactoryLevel,\r\n      forgeLevel,\r\n      manufacturerLevel,\r\n      amount,\r\n      currentItem,\r\n      beltIPM,\r\n    ];\r\n\r\n  // If any params are updated then we want to recalculate the list\r\n  useEffect(() => {\r\n    ingList = [];\r\n    resourceCount = [];\r\n\r\n    const ingInfo = allItems.find((item) => {\r\n      return item.name == currentItem;\r\n    });\r\n\r\n    const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n    const multiplier = levelMultiplier(buildingLevel!);\r\n    const numberOfBuildings = amount / ingInfo!.itemsPerMin / multiplier;\r\n\r\n    var building = ingInfo!.building;\r\n    addIng(currentItem, amount, 0, numberOfBuildings, building);\r\n    GenerateList(currentItem, amount);\r\n    setIngredients(ingList);\r\n    setRawResources(resourceCount);\r\n  }, [\r\n    workshopLevel,\r\n    furnaceLevel,\r\n    machineShopLevel,\r\n    industrialFactoryLevel,\r\n    forgeLevel,\r\n    manufacturerLevel,\r\n    extractorLevel,\r\n    amount,\r\n    currentItem,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    let maxOutput = Infinity;\r\n    resources.forEach((resource) => {\r\n      let resourceAmount = 0;\r\n      rawResources.forEach((rawResource) => {\r\n        if (rawResource.Name == resource) {\r\n          resourceAmount = rawResource.Amount;\r\n        }\r\n      });\r\n\r\n      if (resourceAmount > 0) {\r\n        let ipm = getResourceAmount(resource) / resourceAmount;\r\n        if (ipm < maxOutput) {\r\n          maxOutput = ipm;\r\n        }\r\n      }\r\n    });\r\n\r\n    setMaxItemPerMin(Number((maxOutput * amount).toFixed(4)));\r\n  }, [\r\n    rawResources,\r\n    woodExtractorAmount,\r\n    stoneExtractorAmount,\r\n    ironExtractorAmount,\r\n    copperExtractorAmount,\r\n    wolframiteExtractorAmount,\r\n    coalExtractorAmount,\r\n  ]);\r\n\r\n  const addIng = (\r\n    name: string,\r\n    amount: number,\r\n    depth: number,\r\n    numberOfBuildings: number,\r\n    building: string\r\n  ) => {\r\n    // Add to the sum list\r\n    var itemInArray = false;\r\n    resourceCount.forEach((element) => {\r\n      if (element.Name == name) {\r\n        element.Amount += amount;\r\n        itemInArray = true;\r\n      }\r\n    });\r\n\r\n    if (!itemInArray) {\r\n      resourceCount.push({\r\n        Name: name,\r\n        Amount: amount,\r\n        Building: building,\r\n      });\r\n    }\r\n\r\n    ingList.push({\r\n      name: name,\r\n      amount: amount,\r\n      depth: depth,\r\n      numberOfBuildings: +(numberOfBuildings.toFixed(2)),\r\n      building: building,\r\n    });\r\n  };\r\n\r\n  function extractorOutput(level: number) {\r\n    switch (level) {\r\n      case 1:\r\n        return 7.5;\r\n      case 2:\r\n        return 11.25;\r\n      case 3:\r\n        return 15;\r\n      case 4:\r\n        return 22.5;\r\n      case 5:\r\n        return 30;\r\n      default:\r\n        return 7.5;\r\n    }\r\n  }\r\n\r\n  function getResourceAmount(name: string) {\r\n    let outputPerExtractor = Number(\r\n      extractorOutput(getBuildingLevel(\"extractor\"))\r\n    );\r\n    switch (name.toLowerCase()) {\r\n      case \"wood log\":\r\n        return outputPerExtractor * woodExtractorAmount;\r\n      case \"stone\":\r\n        return outputPerExtractor * stoneExtractorAmount;\r\n      case \"iron ore\":\r\n        return outputPerExtractor * ironExtractorAmount;\r\n      case \"copper ore\":\r\n        return outputPerExtractor * copperExtractorAmount;\r\n      case \"wolframite\":\r\n        return outputPerExtractor * wolframiteExtractorAmount;\r\n      case \"coal\":\r\n        return outputPerExtractor * coalExtractorAmount;\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  function getBuildingLevel(name: string) {\r\n    switch (name.toLowerCase()) {\r\n      case \"workshop\":\r\n        return workshopLevel;\r\n      case \"furnace\":\r\n        return furnaceLevel;\r\n      case \"machine shop\":\r\n        return machineShopLevel;\r\n      case \"industrial factory\":\r\n        return industrialFactoryLevel;\r\n      case \"forge\":\r\n        return forgeLevel;\r\n      case \"manufacturer\":\r\n        return manufacturerLevel;\r\n      case \"extractor\":\r\n        return extractorLevel;\r\n      case \"earth transporter\":\r\n        return 1;\r\n      default:\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function levelMultiplier(level: number) {\r\n    switch (level) {\r\n      case 1:\r\n        return 1;\r\n      case 2:\r\n        return 1.5;\r\n      case 3:\r\n        return 2;\r\n      case 4:\r\n        return 3;\r\n      case 5:\r\n        return 4;\r\n      default:\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function GenerateList(name: string, amountPerMin = 1, depth = 1) {\r\n    const itemInfo = allItems.find((item) => {\r\n      return item.name == name;\r\n    });\r\n\r\n    itemInfo?.ingredientList.forEach((ingredient) => {\r\n      const requireAmountPerMin = ingredient.amount * amountPerMin;\r\n      const buildingLevel = getBuildingLevel(\"extractor\");\r\n      console.log(\"Building Level \" + buildingLevel);\r\n      const multiplier = levelMultiplier(buildingLevel!);\r\n      console.log(\"Multiplier \" + multiplier);\r\n\r\n      const numberOfBuildings = +((\r\n        requireAmountPerMin / (7.5 * multiplier)\r\n      ).toFixed(2));\r\n\r\n      if (resources.includes(ingredient.name)) {\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          \"Extractor\"\r\n        );\r\n      } else {\r\n        const ingInfo = allItems.find((item) => {\r\n          return item.name == ingredient.name;\r\n        });\r\n        const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n        const multiplier = levelMultiplier(buildingLevel!);\r\n        const numberOfBuildings =\r\n          requireAmountPerMin / ingInfo!.itemsPerMin / multiplier;\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          ingInfo!.building\r\n        );\r\n        GenerateList(ingredient.name, requireAmountPerMin, depth + 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  function renderList() {\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {ingredients.map((data) => {\r\n          if (data.amount == 0) {\r\n            return null;\r\n          }\r\n          return (\r\n            <Text style={{ paddingLeft: data.depth * 10 }}>\r\n              {data.amount.toFixed(2)} {data.name} ({data.numberOfBuildings}{\" \"}\r\n              {data.building}, {(data.amount / beltIPM).toFixed(2)} belts out)\r\n            </Text>\r\n          );\r\n        })}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  // We should give these elements an id\r\n  function renderSummaryView() {\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {rawResources\r\n          .sort((a, b) => {\r\n            return a.Name.localeCompare(b.Name);\r\n          })\r\n          .map((data) => {\r\n            // The amount of items that a single building can produce (at level 1)\r\n            var itemsPerMin = 0;\r\n\r\n            if (resources.includes(data.Name)) {\r\n              itemsPerMin = 7.5;\r\n            } else {\r\n              const ingInfo = allItems.find((item) => {\r\n                return item.name == data.Name;\r\n              });\r\n              itemsPerMin = ingInfo!.itemsPerMin;\r\n            }\r\n\r\n            // Account for building levels increasing output\r\n            const buildingLevel = getBuildingLevel(data.Building);\r\n            const multiplier = levelMultiplier(buildingLevel!);\r\n            const numberOfBuildings = data.Amount / (itemsPerMin * multiplier);\r\n            return (\r\n              <Text>\r\n                {data.Name}: {data.Amount.toFixed(2)} (\r\n                {(numberOfBuildings.toFixed(2))} {data.Building})\r\n              </Text>\r\n            );\r\n          })}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  function enterTotalExtractorAmount() {\r\n    return (\r\n      <View\r\n        style={{\r\n          flexDirection: \"row\",\r\n          alignItems: \"center\",\r\n          padding: 5,\r\n          flexWrap: \"wrap\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <NumericInput\r\n          title={\"Wood Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={woodExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setWoodExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Stone Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={stoneExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setStoneExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Copper Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={copperExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            SetCopperExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Iron Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={ironExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setIronExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Coal Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={coalExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setCoalExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Wolframite Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={wolframiteExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setWolframiteExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Belt Items/Min\"}\r\n          width={100}\r\n          height={30}\r\n          value={beltIPM.toString()}\r\n          onChange={(value: number) => {\r\n            setBeltIPM(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n  if (!isLoading) {\r\n    return (\r\n      <View style={{ alignItems: \"center\" }}>\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            padding: 5,\r\n            flexWrap: \"wrap\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <NumericInput\r\n            title={\"Extractor\"}\r\n            width={100}\r\n            height={30}\r\n            value={extractorLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setExtractorLevel(value);\r\n            }}\r\n            max={5}\r\n          />\r\n          <NumericInput\r\n            title={\"Workshop\"}\r\n            width={100}\r\n            height={30}\r\n            value={workshopLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setWorkShopLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Furnace\"}\r\n            width={100}\r\n            height={30}\r\n            value={furnaceLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setFurnaceLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Machine Shop\"}\r\n            width={100}\r\n            height={30}\r\n            value={machineShopLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setMachineShopLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Industrial Factory\"}\r\n            width={100}\r\n            height={30}\r\n            value={industrialFactoryLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setIndustrialFactoryLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Forge\"}\r\n            width={100}\r\n            height={30}\r\n            value={forgeLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setForgeLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Manufacturer\"}\r\n            width={100}\r\n            height={30}\r\n            value={manufacturerLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setManufacturerLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n        </View>\r\n        {enterTotalExtractorAmount()}\r\n\r\n        <View style={{ alignItems: \"center\" }}>\r\n          <View\r\n            style={{\r\n              flexDirection: \"row\",\r\n              alignItems: \"center\",\r\n              padding: 10,\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <View>\r\n              <Text>Max Output</Text>\r\n              <TouchableOpacity\r\n                style={{\r\n                  height: 45,\r\n                  width: 100,\r\n                  borderColor: \"black\",\r\n                  borderRadius: 5,\r\n                  borderWidth: 1,\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n                onPress={() => setAmount(maxItemPerMin)}\r\n              >\r\n                <Text style={{ fontSize: 8 }}>(Press Me)</Text>\r\n                <Text>{maxItemPerMin.toFixed(2)}</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n            <NumericInput\r\n              title={\"Items/Min\"}\r\n              width={125}\r\n              height={45}\r\n              value={amount.toString()}\r\n              onChange={(value: number) => {\r\n                setAmount(value);\r\n              }}\r\n              max={10000}\r\n              min={0}\r\n              showButtons={false}\r\n              updateOnStateChange={true}\r\n              allowDecimal={true}\r\n            />\r\n\r\n            <Picker\r\n              style={{\r\n                width: 100,\r\n                padding: 5,\r\n                borderWidth: 1,\r\n                borderColor: \"#666\",\r\n                borderRadius: 5,\r\n                height: 40,\r\n              }}\r\n              selectedValue={currentItem}\r\n              onValueChange={(itemValue, itemIndex) =>\r\n                setCurrentItem(itemValue)\r\n              }\r\n              itemStyle={{\r\n                borderColor: \"red\",\r\n                borderWidth: 2,\r\n                borderRadius: 5,\r\n              }}\r\n            >\r\n              {allItems\r\n                .sort((a, b) => {\r\n                  return a.name.localeCompare(b.name);\r\n                })\r\n                .map((data) => {\r\n                  return <Picker.Item label={data.name} value={data.name} />;\r\n                })}\r\n            </Picker>\r\n          </View>\r\n        </View>\r\n\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            width: 500,\r\n            alignSelf: \"center\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <TouchableOpacity\r\n            style={{\r\n              height: 50,\r\n              width: \"25%\",\r\n              borderColor: \"black\",\r\n              borderRadius: 5,\r\n              borderWidth: 1,\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              backgroundColor: treeView ? \"#D3D3D3\" : \"white\",\r\n            }}\r\n            onPress={() => {\r\n              setTreeView(true);\r\n            }}\r\n          >\r\n            <Text style={{ padding: 5 }}>Tree View</Text>\r\n          </TouchableOpacity>\r\n          <View style={{ width: 5 }} />\r\n          <TouchableOpacity\r\n            style={{\r\n              height: 50,\r\n              width: \"25%\",\r\n              borderColor: \"black\",\r\n              borderRadius: 5,\r\n              borderWidth: 1,\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              backgroundColor: !treeView ? \"#D3D3D3\" : \"white\",\r\n            }}\r\n            onPress={() => {\r\n              setTreeView(false);\r\n            }}\r\n          >\r\n            <Text style={{ padding: 5 }}>Summary View</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n        {treeView ? renderList() : renderSummaryView()}\r\n        <View style={{ height: 50 }} />\r\n      </View>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: \"100%\",\r\n    height: \"50%\",\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    paddingBottom: 30,\r\n  },\r\n  buildingLevel: {\r\n    paddingLeft: 15,\r\n    paddingRight: 2,\r\n  },\r\n  buildingLevelInput: {\r\n    width: 30,\r\n    padding: 5,\r\n    borderColor: \"black\",\r\n    borderRadius: 5,\r\n    borderWidth: 1,\r\n    height: 30,\r\n  },\r\n  inputContainer: {\r\n    lexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    padding: 5,\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n"],"sourceRoot":""}