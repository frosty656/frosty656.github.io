{"version":3,"sources":["ItemInfo.tsx","Components/NumericInput.tsx","App.tsx"],"names":["resources","allItems","name","itemsPerMin","building","value","ingredientList","amount","NumbericInput","height","width","incrementButtonStyle","backgroundColor","alignitems","textAlign","decrementButtonStyle","title","onChange","console","log","max","min","showButtons","stepSize","updateOnStateChange","allowDecimal","React","useState","lastValue","setLastValue","currentValue","setCurrentValue","getNumericInput","text","length","sanitizedString","hasDecimal","split","forEach","char","includes","Number","toString","useEffect","slice","View","style","alignItems","paddingHorizontal","paddingVertical","Text","flexDirection","justifyContent","TouchableOpacity","borderTopLeftRadius","borderBottomLeftRadius","onPress","TextInput","borderColor","borderWidth","onChangeText","keyboardType","borderRadius","borderBottomRightRadius","borderTopRightRadius","App","treeView","setTreeView","currentItem","setCurrentItem","setAmount","ingredients","setIngredients","rawResources","setRawResources","workshopLevel","setWorkShopLevel","furnaceLevel","setFurnaceLevel","machineShopLevel","setMachineShopLevel","industrialFactoryLevel","setIndustrialFactoryLevel","forgeLevel","setForgeLevel","manufacturerLevel","setManufacturerLevel","extractorLevel","setExtractorLevel","beltIPM","setBeltIPM","maxItemPerMin","setMaxItemPerMin","woodExtractorAmount","setWoodExtractorAmount","stoneExtractorAmount","setStoneExtractorAmount","ironExtractorAmount","setIronExtractorAmount","copperExtractorAmount","SetCopperExtractorAmount","wolframiteExtractorAmount","setWolframiteExtractorAmount","coalExtractorAmount","setCoalExtractorAmount","ingList","resourceCount","isLoading","setIsLoading","a","async","AsyncStorage","getItem","info","JSON","parse","data","setItem","stringify","ingInfo","find","item","multiplier","levelMultiplier","getBuildingLevel","numberOfBuildings","addIng","GenerateList","amountPerMin","depth","itemInfo","ingredient","requireAmountPerMin","buildingLevel","Math","ceil","maxOutput","Infinity","resource","resourceAmount","rawResource","Name","Amount","ipm","outputPerExtractor","level","extractorOutput","toLowerCase","getResourceAmount","toFixed","itemInArray","element","push","Building","padding","flexWrap","fontSize","selectedValue","onValueChange","itemValue","itemIndex","itemStyle","sort","b","localeCompare","map","Item","label","alignSelf","paddingLeft","StyleSheet","create","container","flex","paddingBottom","paddingRight","buildingLevelInput","inputContainer","lexDirection"],"mappings":"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","file":"static/js/app.91a51bac.chunk.js","sourcesContent":["export const resources = [\r\n  \"Copper Ore\",\r\n  \"Iron Ore\",\r\n  \"Wood Log\",\r\n  \"Stone\",\r\n  \"Coal\",\r\n  \"Wolframite\",\r\n];\r\n\r\nexport const allItems = [\r\n  {\r\n    name: \"Wood Plank\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Wood Log\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Wood Frame\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Wood Plank\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Copper Wire\",\r\n    itemsPerMin: 30,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 1.5 }],\r\n  },\r\n  {\r\n    name: \"Heat Sink\",\r\n    itemsPerMin: 10,\r\n    building: \"Workshop\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Iron Gear\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Iron Plating\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Steel Rod\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 35,\r\n    ingredientList: [{ name: \"Steel\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Sand\",\r\n    itemsPerMin: 40,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Stone\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Condenser Lens\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 12,\r\n    ingredientList: [{ name: \"Glass\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Carbon Fiber\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Graphite\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Coupler\",\r\n    itemsPerMin: 6,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Tungsten Carbide\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Iron Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Iron Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Copper Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Copper Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Silicone\",\r\n    itemsPerMin: 20,\r\n    building: \"Furnace\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Sand\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Glass\",\r\n    itemsPerMin: 10,\r\n    building: \"Furnace\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Sand\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Tungsten Ore\",\r\n    itemsPerMin: 24,\r\n    building: \"Furnace\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Wolframite\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Electromagnet\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Machine Shop\",\r\n    value: 14,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 6 },\r\n      { name: \"Iron Ingot\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Logic Circuit\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 10,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 3 },\r\n      { name: \"Silicone\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Metal Frame\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Wood Frame\", amount: 1 },\r\n      { name: \"Iron Plating\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Battery\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Machine Shop\",\r\n    value: 150,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Graphite\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Rotor\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Iron Plating\", amount: 2 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Nano Wire\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Glass\", amount: 4 },\r\n      { name: \"Carbon Fiber\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Graphite\",\r\n    itemsPerMin: 15,\r\n    building: \"Forge\",\r\n    value: 6,\r\n    ingredientList: [\r\n      { name: \"Wood Log\", amount: 3 },\r\n      { name: \"Coal\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Steel\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Iron Ore\", amount: 6 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Concrete\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Sand\", amount: 10 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tungsten Carbide\",\r\n    itemsPerMin: 12,\r\n    building: \"Forge\",\r\n    value: 16,\r\n    ingredientList: [\r\n      { name: \"Tungsten Ore\", amount: 2 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Computer\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Industrial Factory\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Heat Sink\", amount: 3 },\r\n      { name: \"Metal Frame\", amount: 1 },\r\n      { name: \"Logic Circuit\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electric Motor\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 4 },\r\n      { name: \"Rotor\", amount: 2 },\r\n      { name: \"Battery\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electron Microscope\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Manufacturer\",\r\n    value: 300,\r\n    ingredientList: [\r\n      { name: \"Condenser Lens\", amount: 4 },\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Turbocharger\",\r\n    itemsPerMin: 4,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 8 },\r\n      { name: \"Logic Circuit\", amount: 4 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n      { name: \"Coupler\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Super Computer\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 2 },\r\n      { name: \"Heat Sink\", amount: 8 },\r\n      { name: \"Turbocharger\", amount: 1 },\r\n      { name: \"Coupler\", amount: 8 },\r\n    ],\r\n  },\r\n  // Items that I have not unlocked myself\r\n  {\r\n    name: \"Atomic Locator\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 24 },\r\n      { name: \"Copper Wire\", amount: 50 },\r\n      { name: \"Electron Microscope\", amount: 2 },\r\n      { name: \"Super Computer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Earth Token\",\r\n    itemsPerMin: 1.428571429,\r\n    building: \"Earth Transporter\",\r\n    value: 250,\r\n    ingredientList: [{ name: \"Matter Duplicator\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Energy Cube\",\r\n    itemsPerMin: 2,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Battery\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Gyroscope\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 12 },\r\n      { name: \"Rotor\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Industrial Frame\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 6 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Tungsten Carbide\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Magnetic Field Generator\",\r\n    itemsPerMin: 1.5,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 10 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n      { name: \"Nano Wire\", amount: 10 },\r\n      { name: \"Stabilizer\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Compressor\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electric Motor\", amount: 2 },\r\n      { name: \"Tank\", amount: 1 },\r\n      { name: \"Turbocharger\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Duplicator\",\r\n    itemsPerMin: 2 / 3,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Atomic Locator\", amount: 4 },\r\n      { name: \"Energy Cube\", amount: 5 },\r\n      { name: \"Particle Glue\", amount: 100 },\r\n      { name: \"Quantum Entangler\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Particle Glue\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Matter Compressor\", amount: 0.1 }\r\n    ],\r\n  },\r\n  {\r\n    name: \"Quantum Entangler\",\r\n    itemsPerMin: 1,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Magnetic Field Generator\", amount: 1 },\r\n      { name: \"Stabilizer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Stabilizer\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 1 },\r\n      { name: \"Electric Motor\", amount: 1 },\r\n      { name: \"Gyroscope\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tank\",\r\n    itemsPerMin: 6,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 4 },\r\n      { name: \"Glass\", amount: 2 },\r\n      { name: \"Tungsten Carbide\", amount: 4 },\r\n    ],\r\n  },\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n  Button,\r\n} from \"react-native\";\r\n\r\nexport default function NumbericInput({\r\n  height = 100,\r\n  width = 100,\r\n  incrementButtonStyle = {\r\n    backgroundColor: \"#FFCCCB\",\r\n    alignitems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  decrementButtonStyle = {\r\n    backgroundColor: \"#90EE90\",\r\n    alignitems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  value = \"0\",\r\n  title = \"\",\r\n  onChange = (value: number) => {\r\n    console.log(value);\r\n  },\r\n  max = 1000000,\r\n  min = 1,\r\n  showButtons = true,\r\n  stepSize = 1,\r\n  updateOnStateChange = false,\r\n  allowDecimal = false,\r\n  ...otherProps\r\n}) {\r\n  const [lastValue, setLastValue] = React.useState(\"\");\r\n  const [currentValue, setCurrentValue] = React.useState(value);\r\n\r\n  useEffect(() => {\r\n    if (updateOnStateChange) {\r\n      setCurrentValue(value);\r\n    }\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    if (currentValue.slice(-1) != \".\") {\r\n      onChange(Number(currentValue));\r\n    }\r\n  }, [currentValue]);\r\n\r\n  function getNumericInput(text: string) {\r\n    {\r\n      if (text.length == 0 && updateOnStateChange) {\r\n        setLastValue(\"\");\r\n        setCurrentValue(\"0\");\r\n        return;\r\n      }\r\n      console.log(text);\r\n      let sanitizedString = \"\";\r\n      let hasDecimal = false;\r\n      text.split(\"\").forEach((char) => {\r\n        if (\"1234567890.\".includes(char)) {\r\n          if (char == \".\") {\r\n            if (!hasDecimal && allowDecimal) {\r\n              hasDecimal = true;\r\n              sanitizedString += char;\r\n            }\r\n          } else {\r\n            sanitizedString += char;\r\n          }\r\n        }\r\n      });\r\n      if (sanitizedString.length == 0) {\r\n        setCurrentValue(\"\");\r\n        setLastValue(\"\");\r\n        return;\r\n      }\r\n      if (Number(sanitizedString) > max) {\r\n        sanitizedString = max.toString();\r\n      }\r\n      if (Number(sanitizedString) < min) {\r\n        sanitizedString = min.toString();\r\n      }\r\n      console.log(sanitizedString);\r\n      if (sanitizedString != lastValue) {\r\n        setCurrentValue(sanitizedString);\r\n        setLastValue(sanitizedString);\r\n      }\r\n    }\r\n  }\r\n\r\n  function plusButton() {\r\n    if (showButtons) {\r\n      return (\r\n        <TouchableOpacity\r\n          style={[\r\n            decrementButtonStyle,\r\n            {\r\n              borderTopLeftRadius: 10,\r\n              borderBottomLeftRadius: 10,\r\n              width: width / 4,\r\n              height: height,\r\n              justifyContent: \"center\",\r\n            },\r\n          ]}\r\n          onPress={() => getNumericInput((Number(value) - stepSize).toString())}\r\n        >\r\n          <Text>-</Text>\r\n        </TouchableOpacity>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function minusButton() {\r\n    if (showButtons) {\r\n      return (\r\n        <TouchableOpacity\r\n          style={[\r\n            incrementButtonStyle,\r\n            {\r\n              borderBottomRightRadius: 10,\r\n              borderTopRightRadius: 10,\r\n              width: width / 4,\r\n              height: height,\r\n              justifyContent: \"center\",\r\n            },\r\n          ]}\r\n          onPress={() => getNumericInput((Number(value) + stepSize).toString())}\r\n        >\r\n          <Text>+</Text>\r\n        </TouchableOpacity>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function textInput() {\r\n    if (showButtons) {\r\n      return (\r\n        <TextInput\r\n          value={currentValue}\r\n          style={{\r\n            width: width / 2,\r\n            textAlign: \"center\",\r\n            borderColor: \"#D3D3D3\",\r\n            borderWidth: 1,\r\n            height: height,\r\n          }}\r\n          onChangeText={(text) => getNumericInput(text)}\r\n          keyboardType=\"numeric\"\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <TextInput\r\n          value={currentValue}\r\n          style={{\r\n            width: width,\r\n            textAlign: \"center\",\r\n            borderColor: \"#D3D3D3\",\r\n            borderWidth: 1,\r\n            height: height,\r\n            borderRadius: 10,\r\n          }}\r\n          onChangeText={(text) => getNumericInput(text)}\r\n          keyboardType={allowDecimal ? \"decimal-pad\" : \"numeric\"}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        alignItems: \"center\",\r\n        paddingHorizontal: 10,\r\n        paddingVertical: 5,\r\n      }}\r\n    >\r\n      <Text>{title}</Text>\r\n      <View\r\n        style={{\r\n          width: width,\r\n          height: height,\r\n          alignItems: \"center\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        {plusButton()}\r\n        {textInput()}\r\n        {minusButton()}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n","// https://www.npmjs.com/package/react-native-numeric-input\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\r\nimport { allItems, resources } from \"./ItemInfo\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nimport NumericInput from \"./Components/NumericInput\";\r\n\r\n// Test commit for jenkins\r\n\r\nexport default function App() {\r\n  interface Ingredient {\r\n    name: string;\r\n    amount: number;\r\n    depth: number;\r\n    numberOfBuildings: number;\r\n    building: string;\r\n  }\r\n\r\n  interface Resources {\r\n    Name: string;\r\n    Amount: number;\r\n    Building: string;\r\n  }\r\n  const [treeView, setTreeView] = useState(true);\r\n  const [currentItem, setCurrentItem] = useState(\"Wood Plank\");\r\n  const [amount, setAmount] = useState(1);\r\n  const [ingredients, setIngredients] = useState<Ingredient[]>([]);\r\n  const [rawResources, setRawResources] = useState<Resources[]>([]);\r\n\r\n  const [workshopLevel, setWorkShopLevel] = useState(1);\r\n  const [furnaceLevel, setFurnaceLevel] = useState(1);\r\n  const [machineShopLevel, setMachineShopLevel] = useState(1);\r\n  const [industrialFactoryLevel, setIndustrialFactoryLevel] = useState(1);\r\n  const [forgeLevel, setForgeLevel] = useState(1);\r\n  const [manufacturerLevel, setManufacturerLevel] = useState(1);\r\n  const [extractorLevel, setExtractorLevel] = useState(1);\r\n  const [beltIPM, setBeltIPM] = useState(420);\r\n\r\n  const [maxItemPerMin, setMaxItemPerMin] = useState(0);\r\n  const [woodExtractorAmount, setWoodExtractorAmount] = useState(50);\r\n  const [stoneExtractorAmount, setStoneExtractorAmount] = useState(50);\r\n  const [ironExtractorAmount, setIronExtractorAmount] = useState(50);\r\n  const [copperExtractorAmount, SetCopperExtractorAmount] = useState(50);\r\n  const [wolframiteExtractorAmount, setWolframiteExtractorAmount] =\r\n    useState(50);\r\n  const [coalExtractorAmount, setCoalExtractorAmount] = useState(50);\r\n\r\n  var ingList: Ingredient[] = [];\r\n  var resourceCount: Resources[] = [];\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Onload\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const value = await AsyncStorage.getItem(\"@info\");\r\n        if (value !== null) {\r\n          const info = JSON.parse(value);\r\n          setWoodExtractorAmount(info.woodExtractorAmount ?? 50);\r\n          setStoneExtractorAmount(info.stoneExtractorAmount ?? 50);\r\n          setIronExtractorAmount(info.ironExtractorAmount ?? 50);\r\n          SetCopperExtractorAmount(info.copperExtractorAmount ?? 50);\r\n          setWolframiteExtractorAmount(info.wolframiteExtractorAmount ?? 50);\r\n          setCoalExtractorAmount(info.coalExtractorAmount ?? 50);\r\n          setWorkShopLevel(info.workshopLevel ?? 1);\r\n          setFurnaceLevel(info.furnaceLevel ?? 1);\r\n          setMachineShopLevel(info.machineShopLevel ?? 1);\r\n          setIndustrialFactoryLevel(info.industrialFactoryLevel ?? 1);\r\n          setForgeLevel(info.forgeLevel ?? 1);\r\n          setManufacturerLevel(info.manufacturerLevel ?? 1);\r\n          setExtractorLevel(info.extractorLevel ?? 1);\r\n          setAmount(info.amount ?? 1);\r\n          setCurrentItem(info.currentItem ?? \"Wood Plank\");\r\n        }\r\n      } catch (e) {\r\n        console.log(\"Error: \" + e);\r\n      }\r\n      setIsLoading(false);\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      return;\r\n    }\r\n    const data = {\r\n      woodExtractorAmount: woodExtractorAmount,\r\n      stoneExtractorAmount: stoneExtractorAmount,\r\n      ironExtractorAmount: ironExtractorAmount,\r\n      copperExtractorAmount: copperExtractorAmount,\r\n      wolframiteExtractorAmount: wolframiteExtractorAmount,\r\n      coalExtractorAmount: coalExtractorAmount,\r\n      extractorLevel: extractorLevel,\r\n      workshopLevel: workshopLevel,\r\n      furnaceLevel: furnaceLevel,\r\n      machineShopLevel: machineShopLevel,\r\n      industrialFactoryLevel: industrialFactoryLevel,\r\n      forgeLevel: forgeLevel,\r\n      manufacturerLevel: manufacturerLevel,\r\n      amount: amount,\r\n      currentItem: currentItem,\r\n    };\r\n\r\n    (async () => {\r\n      try {\r\n        await AsyncStorage.setItem(\"@info\", JSON.stringify(data));\r\n      } catch (e) {\r\n        console.log(\"Error saving data \" + e);\r\n      }\r\n    })();\r\n  }),\r\n    [\r\n      woodExtractorAmount,\r\n      stoneExtractorAmount,\r\n      ironExtractorAmount,\r\n      copperExtractorAmount,\r\n      wolframiteExtractorAmount,\r\n      coalExtractorAmount,\r\n      extractorLevel,\r\n      workshopLevel,\r\n      furnaceLevel,\r\n      machineShopLevel,\r\n      industrialFactoryLevel,\r\n      forgeLevel,\r\n      manufacturerLevel,\r\n      amount,\r\n      currentItem,\r\n    ];\r\n\r\n  // If any params are updated then we want to recalculate the list\r\n  useEffect(() => {\r\n    ingList = [];\r\n    resourceCount = [];\r\n\r\n    const ingInfo = allItems.find((item) => {\r\n      return item.name == currentItem;\r\n    });\r\n\r\n    const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n    const multiplier = levelMultiplier(buildingLevel!);\r\n    const numberOfBuildings = amount / ingInfo!.itemsPerMin / multiplier;\r\n\r\n    var building = ingInfo!.building;\r\n    addIng(currentItem, amount, 0, numberOfBuildings, building);\r\n    GenerateList(currentItem, amount);\r\n    setIngredients(ingList);\r\n    setRawResources(resourceCount);\r\n  }, [\r\n    workshopLevel,\r\n    furnaceLevel,\r\n    machineShopLevel,\r\n    industrialFactoryLevel,\r\n    forgeLevel,\r\n    manufacturerLevel,\r\n    extractorLevel,\r\n    amount,\r\n    currentItem,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    let maxOutput = Infinity;\r\n    resources.forEach((resource) => {\r\n      let resourceAmount = 0;\r\n      rawResources.forEach((rawResource) => {\r\n        if (rawResource.Name == resource) {\r\n          resourceAmount = rawResource.Amount;\r\n        }\r\n      });\r\n\r\n      if (resourceAmount > 0) {\r\n        let ipm = getResourceAmount(resource) / resourceAmount;\r\n        if (ipm < maxOutput) {\r\n          maxOutput = ipm;\r\n        }\r\n      }\r\n    });\r\n\r\n    setMaxItemPerMin(Number((maxOutput * amount).toFixed(4)));\r\n  }, [\r\n    rawResources,\r\n    woodExtractorAmount,\r\n    stoneExtractorAmount,\r\n    ironExtractorAmount,\r\n    copperExtractorAmount,\r\n    wolframiteExtractorAmount,\r\n    coalExtractorAmount,\r\n  ]);\r\n\r\n  const addIng = (\r\n    name: string,\r\n    amount: number,\r\n    depth: number,\r\n    numberOfBuildings: number,\r\n    building: string\r\n  ) => {\r\n    // Add to the sum list\r\n    var itemInArray = false;\r\n    resourceCount.forEach((element) => {\r\n      if (element.Name == name) {\r\n        element.Amount += amount;\r\n        itemInArray = true;\r\n      }\r\n    });\r\n\r\n    if (!itemInArray) {\r\n      resourceCount.push({\r\n        Name: name,\r\n        Amount: amount,\r\n        Building: building,\r\n      });\r\n    }\r\n\r\n    ingList.push({\r\n      name: name,\r\n      amount: amount,\r\n      depth: depth,\r\n      numberOfBuildings: Math.ceil(numberOfBuildings),\r\n      building: building,\r\n    });\r\n  };\r\n\r\n  function extractorOutput(level: number) {\r\n    switch (level) {\r\n      case 1:\r\n        return 7.5;\r\n      case 2:\r\n        return 11.25;\r\n      case 3:\r\n        return 15;\r\n      case 4:\r\n        return 22.5;\r\n      case 5:\r\n        return 30;\r\n      default:\r\n        return 7.5;\r\n    }\r\n  }\r\n\r\n  function getResourceAmount(name: string) {\r\n    let outputPerExtractor = Number(\r\n      extractorOutput(getBuildingLevel(\"extractor\"))\r\n    );\r\n    switch (name.toLowerCase()) {\r\n      case \"wood log\":\r\n        return outputPerExtractor * woodExtractorAmount;\r\n      case \"stone\":\r\n        return outputPerExtractor * stoneExtractorAmount;\r\n      case \"iron ore\":\r\n        return outputPerExtractor * ironExtractorAmount;\r\n      case \"copper ore\":\r\n        return outputPerExtractor * copperExtractorAmount;\r\n      case \"wolframite\":\r\n        return outputPerExtractor * wolframiteExtractorAmount;\r\n      case \"coal\":\r\n        return outputPerExtractor * coalExtractorAmount;\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  function getBuildingLevel(name: string) {\r\n    switch (name.toLowerCase()) {\r\n      case \"workshop\":\r\n        return workshopLevel;\r\n      case \"furnace\":\r\n        return furnaceLevel;\r\n      case \"machine shop\":\r\n        return machineShopLevel;\r\n      case \"industrial factory\":\r\n        return industrialFactoryLevel;\r\n      case \"forge\":\r\n        return forgeLevel;\r\n      case \"manufacturer\":\r\n        return manufacturerLevel;\r\n      case \"extractor\":\r\n        return extractorLevel;\r\n      case \"earth transporter\":\r\n        return 1;\r\n      default:\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function levelMultiplier(level: number) {\r\n    switch (level) {\r\n      case 1:\r\n        return 1;\r\n      case 2:\r\n        return 1.5;\r\n      case 3:\r\n        return 2;\r\n      case 4:\r\n        return 3;\r\n      case 5:\r\n        return 4;\r\n      default:\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function GenerateList(name: string, amountPerMin = 1, depth = 1) {\r\n    const itemInfo = allItems.find((item) => {\r\n      return item.name == name;\r\n    });\r\n\r\n    itemInfo?.ingredientList.forEach((ingredient) => {\r\n      const requireAmountPerMin = ingredient.amount * amountPerMin;\r\n      const buildingLevel = getBuildingLevel(\"extractor\");\r\n      console.log(\"Building Level \" + buildingLevel);\r\n      const multiplier = levelMultiplier(buildingLevel!);\r\n      console.log(\"Multiplier \" + multiplier);\r\n\r\n      const numberOfBuildings = Math.ceil(\r\n        requireAmountPerMin / (7.5 * multiplier)\r\n      );\r\n\r\n      if (resources.includes(ingredient.name)) {\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          \"Extractor\"\r\n        );\r\n      } else {\r\n        const ingInfo = allItems.find((item) => {\r\n          return item.name == ingredient.name;\r\n        });\r\n        const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n        const multiplier = levelMultiplier(buildingLevel!);\r\n        const numberOfBuildings =\r\n          requireAmountPerMin / ingInfo!.itemsPerMin / multiplier;\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          ingInfo!.building\r\n        );\r\n        GenerateList(ingredient.name, requireAmountPerMin, depth + 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  function renderList() {\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {ingredients.map((data) => {\r\n          if (data.amount == 0) {\r\n            return null;\r\n          }\r\n          return (\r\n            <Text style={{ paddingLeft: data.depth * 10 }}>\r\n              {data.amount.toFixed(2)} {data.name} ({data.numberOfBuildings}{\" \"}\r\n              {data.building}, {Math.ceil(data.amount / beltIPM)} belts out)\r\n            </Text>\r\n          );\r\n        })}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  // We should give these elements an id\r\n  function renderSummaryView() {\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {rawResources\r\n          .sort((a, b) => {\r\n            return a.Name.localeCompare(b.Name);\r\n          })\r\n          .map((data) => {\r\n            // The amount of items that a single building can produce (at level 1)\r\n            var itemsPerMin = 0;\r\n\r\n            if (resources.includes(data.Name)) {\r\n              itemsPerMin = 7.5;\r\n            } else {\r\n              const ingInfo = allItems.find((item) => {\r\n                return item.name == data.Name;\r\n              });\r\n              itemsPerMin = ingInfo!.itemsPerMin;\r\n            }\r\n\r\n            // Account for building levels increasing output\r\n            const buildingLevel = getBuildingLevel(data.Building);\r\n            const multiplier = levelMultiplier(buildingLevel!);\r\n            const numberOfBuildings = data.Amount / (itemsPerMin * multiplier);\r\n            return (\r\n              <Text>\r\n                {data.Name}: {data.Amount.toFixed(2)} (\r\n                {Math.ceil(numberOfBuildings)} {data.Building})\r\n              </Text>\r\n            );\r\n          })}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  function enterTotalExtractorAmount() {\r\n    return (\r\n      <View\r\n        style={{\r\n          flexDirection: \"row\",\r\n          alignItems: \"center\",\r\n          padding: 5,\r\n          flexWrap: \"wrap\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <NumericInput\r\n          title={\"Wood Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={woodExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setWoodExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Stone Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={stoneExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setStoneExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Copper Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={copperExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            SetCopperExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Iron Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={ironExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setIronExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Coal Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={coalExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setCoalExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Wolframite Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={wolframiteExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setWolframiteExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Belt Items/Min\"}\r\n          width={100}\r\n          height={30}\r\n          value={beltIPM.toString()}\r\n          onChange={(value: number) => {\r\n            setBeltIPM(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n  if (!isLoading) {\r\n    return (\r\n      <View style={{ alignItems: \"center\" }}>\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            padding: 5,\r\n            flexWrap: \"wrap\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <NumericInput\r\n            title={\"Extractor\"}\r\n            width={100}\r\n            height={30}\r\n            value={extractorLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setExtractorLevel(value);\r\n            }}\r\n            max={5}\r\n          />\r\n          <NumericInput\r\n            title={\"Workshop\"}\r\n            width={100}\r\n            height={30}\r\n            value={workshopLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setWorkShopLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Furnace\"}\r\n            width={100}\r\n            height={30}\r\n            value={furnaceLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setFurnaceLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Machine Shop\"}\r\n            width={100}\r\n            height={30}\r\n            value={machineShopLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setMachineShopLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Industrial Factory\"}\r\n            width={100}\r\n            height={30}\r\n            value={industrialFactoryLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setIndustrialFactoryLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Forge\"}\r\n            width={100}\r\n            height={30}\r\n            value={forgeLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setForgeLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Manufacturer\"}\r\n            width={100}\r\n            height={30}\r\n            value={manufacturerLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setManufacturerLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n        </View>\r\n        {enterTotalExtractorAmount()}\r\n\r\n        <View style={{ alignItems: \"center\" }}>\r\n          <View\r\n            style={{\r\n              flexDirection: \"row\",\r\n              alignItems: \"center\",\r\n              padding: 10,\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <View>\r\n              <Text>Max Output</Text>\r\n              <TouchableOpacity\r\n                style={{\r\n                  height: 45,\r\n                  width: 100,\r\n                  borderColor: \"black\",\r\n                  borderRadius: 5,\r\n                  borderWidth: 1,\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n                onPress={() => setAmount(maxItemPerMin)}\r\n              >\r\n                <Text style={{ fontSize: 8 }}>(Press Me)</Text>\r\n                <Text>{maxItemPerMin.toFixed(2)}</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n            <NumericInput\r\n              title={\"Items/Min\"}\r\n              width={125}\r\n              height={45}\r\n              value={amount.toString()}\r\n              onChange={(value: number) => {\r\n                setAmount(value);\r\n              }}\r\n              max={10000}\r\n              min={0}\r\n              showButtons={false}\r\n              updateOnStateChange={true}\r\n              allowDecimal={true}\r\n            />\r\n\r\n            <Picker\r\n              style={{\r\n                width: 100,\r\n                padding: 5,\r\n                borderWidth: 1,\r\n                borderColor: \"#666\",\r\n                borderRadius: 5,\r\n                height: 40,\r\n              }}\r\n              selectedValue={currentItem}\r\n              onValueChange={(itemValue, itemIndex) =>\r\n                setCurrentItem(itemValue)\r\n              }\r\n              itemStyle={{\r\n                borderColor: \"red\",\r\n                borderWidth: 2,\r\n                borderRadius: 5,\r\n              }}\r\n            >\r\n              {allItems\r\n                .sort((a, b) => {\r\n                  return a.name.localeCompare(b.name);\r\n                })\r\n                .map((data) => {\r\n                  return <Picker.Item label={data.name} value={data.name} />;\r\n                })}\r\n            </Picker>\r\n          </View>\r\n        </View>\r\n\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            width: 500,\r\n            alignSelf: \"center\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <TouchableOpacity\r\n            style={{\r\n              height: 50,\r\n              width: \"25%\",\r\n              borderColor: \"black\",\r\n              borderRadius: 5,\r\n              borderWidth: 1,\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              backgroundColor: treeView ? \"#D3D3D3\" : \"white\",\r\n            }}\r\n            onPress={() => {\r\n              setTreeView(true);\r\n            }}\r\n          >\r\n            <Text style={{ padding: 5 }}>Tree View</Text>\r\n          </TouchableOpacity>\r\n          <View style={{ width: 5 }} />\r\n          <TouchableOpacity\r\n            style={{\r\n              height: 50,\r\n              width: \"25%\",\r\n              borderColor: \"black\",\r\n              borderRadius: 5,\r\n              borderWidth: 1,\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              backgroundColor: !treeView ? \"#D3D3D3\" : \"white\",\r\n            }}\r\n            onPress={() => {\r\n              setTreeView(false);\r\n            }}\r\n          >\r\n            <Text style={{ padding: 5 }}>Summary View</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n        {treeView ? renderList() : renderSummaryView()}\r\n        <View style={{ height: 50 }} />\r\n      </View>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: \"100%\",\r\n    height: \"50%\",\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    paddingBottom: 30,\r\n  },\r\n  buildingLevel: {\r\n    paddingLeft: 15,\r\n    paddingRight: 2,\r\n  },\r\n  buildingLevelInput: {\r\n    width: 30,\r\n    padding: 5,\r\n    borderColor: \"black\",\r\n    borderRadius: 5,\r\n    borderWidth: 1,\r\n    height: 30,\r\n  },\r\n  inputContainer: {\r\n    lexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    padding: 5,\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n"],"sourceRoot":""}