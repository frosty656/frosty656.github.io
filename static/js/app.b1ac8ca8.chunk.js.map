{"version":3,"sources":["ItemInfo.tsx","Components/NumericInput.tsx","App.tsx"],"names":["resources","allItems","name","itemsPerMin","building","value","ingredientList","amount","NumbericInput","height","width","incrementButtonStyle","backgroundColor","alignitems","textAlign","decrementButtonStyle","title","onChange","console","log","max","min","showButtons","stepSize","React","useState","lastValue","setLastValue","currentValue","setCurrentValue","getNumericInput","text","sanitizedString","hasDecimal","split","forEach","char","includes","Number","toString","useEffect","slice","View","style","alignItems","paddingHorizontal","paddingVertical","Text","flexDirection","justifyContent","TouchableOpacity","borderTopLeftRadius","borderBottomLeftRadius","onPress","TextInput","borderColor","borderWidth","onChangeText","keyboardType","borderRadius","borderBottomRightRadius","borderTopRightRadius","App","treeView","setTreeView","currentItem","setCurrentItem","setAmount","ingredients","setIngredients","workshopLevel","setWorkShopLevel","furnaceLevel","setFurnaceLevel","machineShopLevel","setMachineShopLevel","industrialFactoryLevel","setIndustrialFactoryLevel","forgeLevel","setForgeLevel","manufacturerLevel","setManufacturerLevel","extractorLevel","setExtractorLevel","rawResources","setRawResources","maxItemPerMin","setMaxItemPerMin","woodAmount","setWoodAmount","stoneAmount","setStoneAmount","ironAmount","setIronAmount","copperAmount","SetCopperAmount","wolframiteAmount","setWolframiteAmount","coalAmount","setCoalAmount","ingList","resourceCount","ingInfo","find","item","multiplier","levelMultiplier","getBuildingLevel","numberOfBuildings","addIng","GenerateList","amountPerMin","depth","itemInfo","ingredient","requireAmountPerMin","Math","ceil","maxOutput","Infinity","resource","resourceAmount","rawResource","Name","Amount","ipm","toLowerCase","getResourceAmount","itemInArray","element","push","Building","level","padding","flexWrap","fontSize","toFixed","selectedValue","onValueChange","itemValue","itemIndex","itemStyle","sort","a","b","localeCompare","map","data","Item","label","alignSelf","paddingLeft","StyleSheet","create","container","flex","paddingBottom","buildingLevel","paddingRight","buildingLevelInput","inputContainer","lexDirection"],"mappings":"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","file":"static/js/app.b1ac8ca8.chunk.js","sourcesContent":["export const resources = [\r\n  \"Copper Ore\",\r\n  \"Iron Ore\",\r\n  \"Wood Log\",\r\n  \"Stone\",\r\n  \"Coal\",\r\n  \"Wolframite\",\r\n];\r\n\r\nexport const allItems = [\r\n  {\r\n    name: \"Wood Plank\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Wood Log\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Wood Frame\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Wood Plank\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Copper Wire\",\r\n    itemsPerMin: 30,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 1.5 }],\r\n  },\r\n  {\r\n    name: \"Heat Sink\",\r\n    itemsPerMin: 10,\r\n    building: \"Workshop\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Iron Gear\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Iron Plating\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Steel Rod\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 35,\r\n    ingredientList: [{ name: \"Steel\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Sand\",\r\n    itemsPerMin: 40,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Stone\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Condenser Lens\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 12,\r\n    ingredientList: [{ name: \"Glass\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Carbon Fiber\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Graphite\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Coupler\",\r\n    itemsPerMin: 6,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Tungsten Carbide\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Iron Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Iron Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Copper Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Copper Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Silicone\",\r\n    itemsPerMin: 20,\r\n    building: \"Furnace\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Sand\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Glass\",\r\n    itemsPerMin: 10,\r\n    building: \"Furnace\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Sand\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Tungsten Ore\",\r\n    itemsPerMin: 24,\r\n    building: \"Furnace\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Wolframite\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Electromagnet\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Machine Shop\",\r\n    value: 14,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 6 },\r\n      { name: \"Iron Ingot\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Logic Circuit\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 10,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 3 },\r\n      { name: \"Silicone\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Metal Frame\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Wood Frame\", amount: 1 },\r\n      { name: \"Iron Plating\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Battery\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Machine Shop\",\r\n    value: 150,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Graphite\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Rotor\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Iron Plating\", amount: 2 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Nano Wire\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Glass\", amount: 4 },\r\n      { name: \"Carbon Fiber\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Graphite\",\r\n    itemsPerMin: 15,\r\n    building: \"Forge\",\r\n    value: 6,\r\n    ingredientList: [\r\n      { name: \"Wood Log\", amount: 3 },\r\n      { name: \"Coal\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Steel\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Iron Ore\", amount: 6 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Concrete\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Sand\", amount: 10 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tungsten Carbide\",\r\n    itemsPerMin: 12,\r\n    building: \"Forge\",\r\n    value: 16,\r\n    ingredientList: [\r\n      { name: \"Tungsten Ore\", amount: 2 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Computer\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Industrial Factory\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Heat Sink\", amount: 3 },\r\n      { name: \"Metal Frame\", amount: 1 },\r\n      { name: \"Logic Circuit\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electric Motor\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 4 },\r\n      { name: \"Rotor\", amount: 2 },\r\n      { name: \"Battery\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electron Microscope\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Manufacturer\",\r\n    value: 300,\r\n    ingredientList: [\r\n      { name: \"Condenser Lens\", amount: 4 },\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Turbocharger\",\r\n    itemsPerMin: 4,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 8 },\r\n      { name: \"Logic Circuit\", amount: 4 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n      { name: \"Coupler\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Super Computer\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 2 },\r\n      { name: \"Heat Sink\", amount: 8 },\r\n      { name: \"Turbocharger\", amount: 1 },\r\n      { name: \"Coupler\", amount: 8 },\r\n    ],\r\n  },\r\n  // Items that I have not unlocked myself\r\n  {\r\n    name: \"Atomic Locator\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 24 },\r\n      { name: \"Copper Wire\", amount: 50 },\r\n      { name: \"Electron Microscope\", amount: 2 },\r\n      { name: \"Super Computer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Earth Token\",\r\n    itemsPerMin: 1.428571429,\r\n    building: \"Earth Transporter\",\r\n    value: 250,\r\n    ingredientList: [{ name: \"Matter Duplicator\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Energy Cube\",\r\n    itemsPerMin: 2,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Battery\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Gyroscope\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 12 },\r\n      { name: \"Rotor\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Industrial Frame\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 6 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Tungsten Carbide\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Magnetic Field Generator\",\r\n    itemsPerMin: 1.5,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 10 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n      { name: \"Nano Wire\", amount: 10 },\r\n      { name: \"Stabilizer\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Compressor\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electric Motor\", amount: 2 },\r\n      { name: \"Tank\", amount: 1 },\r\n      { name: \"Turbocharger\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Duplicator\",\r\n    itemsPerMin: 2 / 3,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Atomic Locator\", amount: 4 },\r\n      { name: \"Energy Cube\", amount: 5 },\r\n      { name: \"Particle Glue\", amount: 100 },\r\n      { name: \"Quantum Entangler\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Particle Glue\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Matter Compressor\", amount: 0.1 }\r\n    ],\r\n  },\r\n  {\r\n    name: \"Quantum Entangler\",\r\n    itemsPerMin: 1,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Magnetic Field Generator\", amount: 1 },\r\n      { name: \"Stabilizer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Stabilizer\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 1 },\r\n      { name: \"Electric Motor\", amount: 1 },\r\n      { name: \"Gyroscope\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tank\",\r\n    itemsPerMin: 6,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 4 },\r\n      { name: \"Glass\", amount: 2 },\r\n      { name: \"Tungsten Carbide\", amount: 4 },\r\n    ],\r\n  },\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n  Button,\r\n} from \"react-native\";\r\n\r\nexport default function NumbericInput({\r\n  height = 100,\r\n  width = 100,\r\n  incrementButtonStyle = {\r\n    backgroundColor: \"#FFCCCB\",\r\n    alignitems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  decrementButtonStyle = {\r\n    backgroundColor: \"#90EE90\",\r\n    alignitems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  value = \"0\",\r\n  title = \"\",\r\n  onChange = (value: number) => {\r\n    console.log(value);\r\n  },\r\n  max = 1000000,\r\n  min = 1,\r\n  showButtons = true,\r\n  stepSize = 1,\r\n  ...otherProps\r\n}) {\r\n  const [lastValue, setLastValue] = React.useState(\"\");\r\n  const [currentValue, setCurrentValue] = React.useState(value);\r\n\r\n  useEffect(() => {setCurrentValue(value)}, [value])\r\n\r\n  useEffect(() => {\r\n    if (currentValue.slice(-1) != \".\") {\r\n      onChange(Number(currentValue));\r\n    }\r\n  }, [currentValue]);\r\n\r\n  function getNumericInput(text: string) {\r\n    {\r\n      let sanitizedString = \"\";\r\n      let hasDecimal = false;\r\n      text.split(\"\").forEach((char) => {\r\n        if (\"1234567890.\".includes(char)) {\r\n          if (char == \".\") {\r\n            if (!hasDecimal) {\r\n              hasDecimal = true;\r\n              sanitizedString += char;\r\n            }\r\n          } else {\r\n            sanitizedString += char;\r\n          }\r\n          if (Number(sanitizedString) > max) {\r\n            sanitizedString = max.toString();\r\n          }\r\n          if (Number(sanitizedString) < min) {\r\n            sanitizedString = min.toString();\r\n          }\r\n        }\r\n      });\r\n      if (sanitizedString != lastValue) {\r\n        setCurrentValue(sanitizedString);\r\n        setLastValue(sanitizedString);\r\n      }\r\n    }\r\n  }\r\n\r\n  function plusButton() {\r\n    if (showButtons) {\r\n      return (\r\n        <TouchableOpacity\r\n          style={[\r\n            decrementButtonStyle,\r\n            {\r\n              borderTopLeftRadius: 10,\r\n              borderBottomLeftRadius: 10,\r\n              width: width / 4,\r\n              height: height,\r\n              justifyContent: \"center\",\r\n            },\r\n          ]}\r\n          onPress={() => getNumericInput((Number(value) - stepSize).toString())}\r\n        >\r\n          <Text>-</Text>\r\n        </TouchableOpacity>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function minusButton() {\r\n    if (showButtons) {\r\n      return (\r\n        <TouchableOpacity\r\n          style={[\r\n            incrementButtonStyle,\r\n            {\r\n              borderBottomRightRadius: 10,\r\n              borderTopRightRadius: 10,\r\n              width: width / 4,\r\n              height: height,\r\n              justifyContent: \"center\",\r\n            },\r\n          ]}\r\n          onPress={() => getNumericInput((Number(value) + stepSize).toString())}\r\n        >\r\n          <Text>+</Text>\r\n        </TouchableOpacity>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function textInput() {\r\n    if (showButtons) {\r\n      return (\r\n        <TextInput\r\n          value={currentValue}\r\n          style={{\r\n            width: width / 2,\r\n            textAlign: \"center\",\r\n            borderColor: \"#D3D3D3\",\r\n            borderWidth: 1,\r\n            height: height,\r\n          }}\r\n          onChangeText={(text) => getNumericInput(text)}\r\n          keyboardType=\"numeric\"\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <TextInput\r\n          value={currentValue}\r\n          style={{\r\n            width: width / 2,\r\n            textAlign: \"center\",\r\n            borderColor: \"#D3D3D3\",\r\n            borderWidth: 1,\r\n            height: height,\r\n            borderRadius: 10,\r\n          }}\r\n          onChangeText={(text) => getNumericInput(text)}\r\n          keyboardType=\"numeric\"\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={{ alignItems: \"center\", paddingHorizontal: 10, paddingVertical: 5 }}>\r\n      <Text>{title}</Text>\r\n      <View\r\n        style={{\r\n          width: width,\r\n          height: height,\r\n          alignItems: \"center\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        {plusButton()}\r\n        {textInput()}\r\n        {minusButton()}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n","// https://www.npmjs.com/package/react-native-numeric-input\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\nimport { allItems, resources } from \"./ItemInfo\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\n\r\nimport NumericInput from \"./Components/NumericInput\";\r\n\r\nexport default function App() {\r\n  interface Ingredient {\r\n    name: string;\r\n    amount: number;\r\n    depth: number;\r\n    numberOfBuildings: number;\r\n    building: string;\r\n  }\r\n\r\n  interface Resources {\r\n    Name: string;\r\n    Amount: number;\r\n    Building: string;\r\n  }\r\n\r\n  const [treeView, setTreeView] = useState(true);\r\n  const [currentItem, setCurrentItem] = useState(\"Wood Plank\");\r\n  const [amount, setAmount] = useState(1);\r\n  const [ingredients, setIngredients] = useState<Ingredient[]>([]);\r\n  const [workshopLevel, setWorkShopLevel] = useState(1);\r\n  const [furnaceLevel, setFurnaceLevel] = useState(1);\r\n  const [machineShopLevel, setMachineShopLevel] = useState(1);\r\n  const [industrialFactoryLevel, setIndustrialFactoryLevel] = useState(1);\r\n  const [forgeLevel, setForgeLevel] = useState(1);\r\n  const [manufacturerLevel, setManufacturerLevel] = useState(1);\r\n  const [extractorLevel, setExtractorLevel] = useState(1);\r\n  const [rawResources, setRawResources] = useState<Resources[]>([]);\r\n\r\n  const [maxItemPerMin, setMaxItemPerMin] = useState(0);\r\n  const [woodAmount, setWoodAmount] = useState(1000);\r\n  const [stoneAmount, setStoneAmount] = useState(1000);\r\n  const [ironAmount, setIronAmount] = useState(1000);\r\n  const [copperAmount, SetCopperAmount] = useState(1000);\r\n  const [wolframiteAmount, setWolframiteAmount] = useState(1000);\r\n  const [coalAmount, setCoalAmount] = useState(1000);\r\n\r\n  var ingList: Ingredient[] = [];\r\n  var resourceCount: Resources[] = [];\r\n\r\n  // If any params are updated then we want to recalculate the list\r\n  useEffect(() => {\r\n    ingList = [];\r\n    resourceCount = [];\r\n\r\n    const ingInfo = allItems.find((item) => {\r\n      return item.name == currentItem;\r\n    });\r\n\r\n    const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n    const multiplier = levelMultiplier(buildingLevel!);\r\n    const numberOfBuildings = amount / ingInfo!.itemsPerMin / multiplier;\r\n\r\n    var building = ingInfo!.building;\r\n    addIng(currentItem, amount, 0, numberOfBuildings, building);\r\n    GenerateList(currentItem, amount);\r\n    setIngredients(ingList);\r\n    setRawResources(resourceCount);\r\n  }, [\r\n    workshopLevel,\r\n    furnaceLevel,\r\n    machineShopLevel,\r\n    industrialFactoryLevel,\r\n    forgeLevel,\r\n    manufacturerLevel,\r\n    extractorLevel,\r\n    amount,\r\n    currentItem,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    let maxOutput = Infinity;\r\n    resources.forEach((resource) => {\r\n      let resourceAmount = 0;\r\n      rawResources.forEach((rawResource) => {\r\n        if (rawResource.Name == resource) {\r\n          resourceAmount = rawResource.Amount;\r\n        }\r\n      });\r\n\r\n      if (resourceAmount > 0) {\r\n        let ipm = getResourceAmount(resource) / resourceAmount;\r\n        if (ipm < maxOutput) {\r\n          maxOutput = ipm;\r\n        }\r\n      }\r\n    });\r\n\r\n    setMaxItemPerMin(maxOutput * amount);\r\n  }, [rawResources, woodAmount, stoneAmount, ironAmount, copperAmount, coalAmount, wolframiteAmount]);\r\n\r\n  const addIng = (\r\n    name: string,\r\n    amount: number,\r\n    depth: number,\r\n    numberOfBuildings: number,\r\n    building: string\r\n  ) => {\r\n    // Add to the sum list\r\n    var itemInArray = false;\r\n    resourceCount.forEach((element) => {\r\n      if (element.Name == name) {\r\n        element.Amount += amount;\r\n        itemInArray = true;\r\n      }\r\n    });\r\n\r\n    if (!itemInArray) {\r\n      resourceCount.push({\r\n        Name: name,\r\n        Amount: amount,\r\n        Building: building,\r\n      });\r\n    }\r\n\r\n    ingList.push({\r\n      name: name,\r\n      amount: amount,\r\n      depth: depth,\r\n      numberOfBuildings: Math.ceil(numberOfBuildings),\r\n      building: building,\r\n    });\r\n  };\r\n\r\n  function getResourceAmount(name: string) {\r\n    switch (name.toLowerCase()) {\r\n      case \"wood log\":\r\n        return woodAmount;\r\n      case \"stone\":\r\n        return stoneAmount;\r\n      case \"iron ore\":\r\n        return ironAmount;\r\n      case \"copper ore\":\r\n        return copperAmount;\r\n      case \"wolframite\":\r\n        return wolframiteAmount;\r\n      case \"coal\":\r\n        return coalAmount;\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  function getBuildingLevel(name: string) {\r\n    switch (name.toLowerCase()) {\r\n      case \"workshop\":\r\n        return workshopLevel;\r\n      case \"furnace\":\r\n        return furnaceLevel;\r\n      case \"machine shop\":\r\n        return machineShopLevel;\r\n      case \"industrial factory\":\r\n        return industrialFactoryLevel;\r\n      case \"forge\":\r\n        return forgeLevel;\r\n      case \"manufacturer\":\r\n        return manufacturerLevel;\r\n      case \"extractor\":\r\n        return extractorLevel;\r\n      case \"earth transporter\":\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function levelMultiplier(level: number) {\r\n    switch (level) {\r\n      case 1:\r\n        return 1;\r\n      case 2:\r\n        return 1.5;\r\n      case 3:\r\n        return 2;\r\n      case 4:\r\n        return 3;\r\n      case 5:\r\n        return 4;\r\n      default:\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function GenerateList(name: string, amountPerMin = 1, depth = 1) {\r\n    const itemInfo = allItems.find((item) => {\r\n      return item.name == name;\r\n    });\r\n\r\n    itemInfo?.ingredientList.forEach((ingredient) => {\r\n      const requireAmountPerMin = ingredient.amount * amountPerMin;\r\n      const buildingLevel = getBuildingLevel(\"extractor\");\r\n      const multiplier = levelMultiplier(buildingLevel!);\r\n      const numberOfBuildings = Math.ceil(\r\n        requireAmountPerMin / (7.5 * multiplier)\r\n      );\r\n      if (resources.includes(ingredient.name)) {\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          \"Extractor\"\r\n        );\r\n      } else {\r\n        const ingInfo = allItems.find((item) => {\r\n          return item.name == ingredient.name;\r\n        });\r\n        const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n        const multiplier = levelMultiplier(buildingLevel!);\r\n        const numberOfBuildings =\r\n          requireAmountPerMin / ingInfo!.itemsPerMin / multiplier;\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          ingInfo!.building\r\n        );\r\n        GenerateList(ingredient.name, requireAmountPerMin, depth + 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  function renderList() {\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {ingredients.map((data) => {\r\n          if (data.amount == 0) {\r\n            return null;\r\n          }\r\n          return (\r\n            <Text style={{ paddingLeft: data.depth * 10 }}>\r\n              {data.amount} {data.name} ({data.numberOfBuildings}{\" \"}\r\n              {data.building})\r\n            </Text>\r\n          );\r\n        })}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  // We should give these elements an id\r\n  function renderIngList() {\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {rawResources\r\n          .sort((a, b) => {\r\n            return a.Name.localeCompare(b.Name);\r\n          })\r\n          .map((data) => {\r\n            var itemsPerMin = 0;\r\n            if (resources.includes(data.Name)) {\r\n              itemsPerMin =\r\n                7.5 * levelMultiplier(getBuildingLevel(\"extractor\")!);\r\n            } else {\r\n              const ingInfo = allItems.find((item) => {\r\n                return item.name == data.Name;\r\n              });\r\n              itemsPerMin = ingInfo!.itemsPerMin;\r\n            }\r\n\r\n            const buildingLevel = getBuildingLevel(data.Building);\r\n\r\n            const multiplier = levelMultiplier(buildingLevel!);\r\n            const numberOfBuildings = data.Amount / itemsPerMin / multiplier;\r\n            return (\r\n              <Text>\r\n                {data.Name}: {data.Amount} ({Math.ceil(numberOfBuildings)}{\" \"}\r\n                {data.Building})\r\n              </Text>\r\n            );\r\n          })}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={{ alignItems: \"center\" }}>\r\n      <View style={{ flexDirection: \"row\", alignItems: \"center\", padding: 5, flexWrap: 'wrap', justifyContent: 'center'  }}>\r\n        <NumericInput\r\n          title={\"Extractor\"}\r\n          width={100}\r\n          height={30}\r\n          value={extractorLevel.toString()}\r\n          onChange={(value: number) => {\r\n            setExtractorLevel(value);\r\n          }}\r\n          max={5}\r\n        />\r\n        <NumericInput\r\n          title={\"Workshop\"}\r\n          width={100}\r\n          height={30}\r\n          value={workshopLevel.toString()}\r\n          onChange={(value: number) => {\r\n            setWorkShopLevel(value);\r\n          }}\r\n          max={4}\r\n        />\r\n        <NumericInput\r\n          title={\"Furnace\"}\r\n          width={100}\r\n          height={30}\r\n          value={furnaceLevel.toString()}\r\n          onChange={(value: number) => {\r\n            setFurnaceLevel(value);\r\n          }}\r\n          max={4}\r\n        />\r\n        <NumericInput\r\n          title={\"Machine Shop\"}\r\n          width={100}\r\n          height={30}\r\n          value={machineShopLevel.toString()}\r\n          onChange={(value: number) => {\r\n            setMachineShopLevel(value);\r\n          }}\r\n          max={4}\r\n        />\r\n        <NumericInput\r\n          title={\"Industrial Factory\"}\r\n          width={100}\r\n          height={30}\r\n          value={industrialFactoryLevel.toString()}\r\n          onChange={(value: number) => {\r\n            setIndustrialFactoryLevel(value);\r\n          }}\r\n          max={4}\r\n        />\r\n        <NumericInput\r\n          title={\"Forge\"}\r\n          width={100}\r\n          height={30}\r\n          value={forgeLevel.toString()}\r\n          onChange={(value: number) => {\r\n            setForgeLevel(value);\r\n          }}\r\n          max={4}\r\n        />\r\n        <NumericInput\r\n          title={\"Manufacturer\"}\r\n          width={100}\r\n          height={30}\r\n          value={manufacturerLevel.toString()}\r\n          onChange={(value: number) => {\r\n            setManufacturerLevel(value);\r\n          }}\r\n          max={4}\r\n        />\r\n      </View>\r\n      <View style={{ flexDirection: \"row\", alignItems: \"center\", padding: 5, flexWrap: 'wrap', justifyContent: 'center' }}>\r\n        <NumericInput\r\n            title={\"Wood\"}\r\n            width={100}\r\n            height={30}\r\n            value={woodAmount.toString()}\r\n            onChange={(value: number) => {\r\n              setWoodAmount(value);\r\n            }}\r\n            max={10000}\r\n          />\r\n          <NumericInput\r\n            title={\"Stone\"}\r\n            width={100}\r\n            height={30}\r\n            value={stoneAmount.toString()}\r\n            onChange={(value: number) => {\r\n              setStoneAmount(value);\r\n            }}\r\n            max={10000}\r\n          />\r\n          <NumericInput\r\n            title={\"Copper\"}\r\n            width={100}\r\n            height={30}\r\n            value={copperAmount.toString()}\r\n            onChange={(value: number) => {\r\n              SetCopperAmount(value);\r\n            }}\r\n            max={10000}\r\n          />\r\n          <NumericInput\r\n            title={\"Iron\"}\r\n            width={100}\r\n            height={30}\r\n            value={ironAmount.toString()}\r\n            onChange={(value: number) => {\r\n              setIronAmount(value);\r\n            }}\r\n            max={10000}\r\n          />\r\n          <NumericInput\r\n            title={\"Coal\"}\r\n            width={100}\r\n            height={30}\r\n            value={coalAmount.toString()}\r\n            onChange={(value: number) => {\r\n              setCoalAmount(value);\r\n            }}\r\n            max={10000}\r\n          />\r\n          <NumericInput\r\n            title={\"Wolframite\"}\r\n            width={100}\r\n            height={30}\r\n            value={wolframiteAmount.toString()}\r\n            onChange={(value: number) => {\r\n              setWolframiteAmount(value);\r\n            }}\r\n            max={10000}\r\n          />\r\n        </View>\r\n      <View style={{ alignItems: \"center\" }}>\r\n        <View\r\n          style={{ flexDirection: \"row\", alignItems: \"center\", padding: 10 }}\r\n        >\r\n          <View>\r\n            <Text>Max Output</Text>\r\n          <TouchableOpacity \r\n          style={{\r\n            height: 45,\r\n            width: 100,\r\n            borderColor: \"black\",\r\n            borderRadius: 5,\r\n            borderWidth: 1,\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n          }}\r\n          onPress={() => setAmount(maxItemPerMin)}>\r\n            <Text style={{fontSize: 8}}>(Press Me)</Text>\r\n          <Text>{maxItemPerMin.toFixed(2)}</Text>\r\n        </TouchableOpacity>\r\n        </View>\r\n          <NumericInput\r\n            title={\"Items/Min\"}\r\n            width={150}\r\n            height={45}\r\n            value={amount.toString()}\r\n            onChange={(value: number) => {\r\n              setAmount(value);\r\n            }}\r\n            max={10000}\r\n            showButtons={false}\r\n          />\r\n          <View style={{ width: 5 }} />\r\n\r\n          <Picker\r\n            style={{\r\n              width: 100,\r\n              padding: 10,\r\n              borderWidth: 1,\r\n              borderColor: \"#666\",\r\n              borderRadius: 5,\r\n              height: 40,\r\n            }}\r\n            selectedValue={currentItem}\r\n            onValueChange={(itemValue, itemIndex) => setCurrentItem(itemValue)}\r\n            itemStyle={{ borderColor: \"red\", borderWidth: 2, borderRadius: 5 }}\r\n          >\r\n            {allItems\r\n              .sort((a, b) => {\r\n                return a.name.localeCompare(b.name);\r\n              })\r\n              .map((data) => {\r\n                return <Picker.Item label={data.name} value={data.name} />;\r\n              })}\r\n          </Picker>\r\n        </View>\r\n      </View>\r\n\r\n      <View\r\n        style={{\r\n          flexDirection: \"row\",\r\n          width: 500,\r\n          alignSelf: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <TouchableOpacity\r\n          style={{\r\n            height: 50,\r\n            width: \"25%\",\r\n            borderColor: \"black\",\r\n            borderRadius: 5,\r\n            borderWidth: 1,\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            backgroundColor: treeView ? \"#D3D3D3\" : \"white\",\r\n          }}\r\n          onPress={() => {\r\n            setTreeView(true);\r\n          }}\r\n        >\r\n          <Text style={{ padding: 5 }}>Tree View</Text>\r\n        </TouchableOpacity>\r\n        <View style={{ width: 5 }} />\r\n        <TouchableOpacity\r\n          style={{\r\n            height: 50,\r\n            width: \"25%\",\r\n            borderColor: \"black\",\r\n            borderRadius: 5,\r\n            borderWidth: 1,\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            backgroundColor: !treeView ? \"#D3D3D3\" : \"white\",\r\n          }}\r\n          onPress={() => {\r\n            setTreeView(false);\r\n          }}\r\n        >\r\n          <Text style={{ padding: 5 }}>Summary View</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      {treeView ? renderList() : renderIngList()}\r\n      <View style={{ height: 50 }} />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: \"100%\",\r\n    height: \"50%\",\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    paddingBottom: 30,\r\n  },\r\n  buildingLevel: {\r\n    paddingLeft: 15,\r\n    paddingRight: 2,\r\n  },\r\n  buildingLevelInput: {\r\n    width: 30,\r\n    padding: 5,\r\n    borderColor: \"black\",\r\n    borderRadius: 5,\r\n    borderWidth: 1,\r\n    height: 30,\r\n  },\r\n  inputContainer: {\r\n    lexDirection: \"row\", \r\n    alignItems: \"center\", \r\n    padding: 5, \r\n    flexWrap: 'wrap', \r\n    justifyContent: 'center'\r\n  },\r\n});\r\n"],"sourceRoot":""}