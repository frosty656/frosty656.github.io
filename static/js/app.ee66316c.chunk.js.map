{"version":3,"sources":["ItemInfo.tsx","App.tsx"],"names":["resources","allItems","name","itemsPerMin","building","value","ingredientList","amount","App","useState","currentItem","setCurrentItem","setAmount","ingredients","setIngredients","workshopLevel","setWorkShopLevel","furnaceLevel","setFurnaceLevel","machineShopLevel","setMachineShopLevel","industrialFactoryLevel","setIndustrialFactoryLevel","forgeLevel","setForgeLevel","manufacturerLevel","setManufacturerLevel","extractorLevel","setExtractorLevel","treeView","ingList","useEffect","a","async","getData","ws","parseInt","fu","ms","inf","fo","mf","ex","ingInfo","find","item","multiplier","levelMultiplier","getBuildingLevel","numberOfBuildings","addIng","GenerateList","amountPerMin","depth","itemInfo","forEach","ingredient","requireAmountPerMin","Math","ceil","includes","length","push","toLowerCase","level","storeData","key","AsyncStorage","setItem","getItem","View","style","alignItems","flexDirection","padding","Text","styles","buildingLevel","TextInput","buildingLevelInput","keyboardType","onChangeText","input","replace","Number","toString","paddingRight","width","borderColor","borderRadius","borderWidth","height","selectedValue","onValueChange","itemValue","itemIndex","itemStyle","sort","b","localeCompare","map","data","Item","label","paddingLeft","StyleSheet","create","container","flex","backgroundColor","justifyContent","paddingBottom"],"mappings":"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","file":"static/js/app.ee66316c.chunk.js","sourcesContent":["export const resources = [\r\n  \"Copper Ore\",\r\n  \"Iron Ore\",\r\n  \"Wood Log\",\r\n  \"Stone\",\r\n  \"Coal\",\r\n  \"Wolframite\",\r\n];\r\n\r\nexport const allItems = [\r\n  {\r\n    name: \"Wood Plank\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Wood Log\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Wood Frame\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Wood Plank\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Copper Wire\",\r\n    itemsPerMin: 30,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 1.5 }],\r\n  },\r\n  {\r\n    name: \"Heat Sink\",\r\n    itemsPerMin: 10,\r\n    building: \"Workshop\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Iron Gear\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Iron Plating\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Steel Rod\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 35,\r\n    ingredientList: [{ name: \"Steel\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Sand\",\r\n    itemsPerMin: 40,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Stone\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Condenser Lens\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 12,\r\n    ingredientList: [{ name: \"Glass\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Carbon Fiber\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Graphite\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Coupler\",\r\n    itemsPerMin: 6,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Tungsten Carbide\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Iron Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Iron Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Copper Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Copper Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Silicone\",\r\n    itemsPerMin: 20,\r\n    building: \"Furnace\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Sand\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Glass\",\r\n    itemsPerMin: 10,\r\n    building: \"Furnace\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Sand\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Tungsten Ore\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Wolframite\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Electromagnet\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Machine Shop\",\r\n    value: 14,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 6 },\r\n      { name: \"Iron Ingot\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Logic Circuit\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 10,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 3 },\r\n      { name: \"Silicone\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Metal Frame\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Wood Frame\", amount: 1 },\r\n      { name: \"Iron Plating\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Battery\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Machine Shop\",\r\n    value: 150,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Graphite\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Rotor\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Iron Plating\", amount: 2 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Nano Wire\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Glass\", amount: 4 },\r\n      { name: \"Carbon Fiber\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Graphite\",\r\n    itemsPerMin: 15,\r\n    building: \"Forge\",\r\n    value: 6,\r\n    ingredientList: [\r\n      { name: \"Wood Log\", amount: 3 },\r\n      { name: \"Coal\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Steel\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Iron Ore\", amount: 6 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Concrete\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Sand\", amount: 10 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tungsten Carbide\",\r\n    itemsPerMin: 12,\r\n    building: \"Forge\",\r\n    value: 16,\r\n    ingredientList: [\r\n      { name: \"Tungsten Ore\", amount: 2 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Computer\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Industrial Factory\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Heat Sink\", amount: 3 },\r\n      { name: \"Metal Frame\", amount: 1 },\r\n      { name: \"Logic Circuit\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electric Motor\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 4 },\r\n      { name: \"Rotor\", amount: 2 },\r\n      { name: \"Battery\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electron Microscope\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Manufacturer\",\r\n    value: 300,\r\n    ingredientList: [\r\n      { name: \"Condenser Lens\", amount: 4 },\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Turbocharger\",\r\n    itemsPerMin: 4,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 8 },\r\n      { name: \"Logic Circuit\", amount: 4 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n      { name: \"Coupler\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Super Computer\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 1 },\r\n      { name: \"Heat Sink\", amount: 8 },\r\n      { name: \"Turbocharger\", amount: 1 },\r\n      { name: \"Coupler\", amount: 8 },\r\n    ],\r\n  },\r\n  // Items that I have not unlocked myself\r\n  {\r\n    name: \"Atomic Locator\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 24 },\r\n      { name: \"Copper Wire\", amount: 50 },\r\n      { name: \"Electron Microscope\", amount: 2 },\r\n      { name: \"Super Computer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Earth Token\",\r\n    itemsPerMin: 1.428571429,\r\n    building: \"Earth Transporter\",\r\n    value: 250,\r\n    ingredientList: [{ name: \"Matter Duplicator\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Energy Cube\",\r\n    itemsPerMin: 2,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Battery\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Gyroscope\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 12 },\r\n      { name: \"Rotor\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Industrial Frame\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 6 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Tungsten Carbide\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Magnetic Field Generator\",\r\n    itemsPerMin: 1.5,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 10 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n      { name: \"Nano Wire\", amount: 10 },\r\n      { name: \"Stabilizer\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Compressor\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electric Motor\", amount: 2 },\r\n      { name: \"Tank\", amount: 1 },\r\n      { name: \"Turbocharger\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Duplicator\",\r\n    itemsPerMin: 2 / 3,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Atomic Locator\", amount: 4 },\r\n      { name: \"Energy Cube\", amount: 5 },\r\n      { name: \"Particle Glue\", amount: 100 },\r\n      { name: \"Quantum Entangler\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Particle Glue\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Matter Compressor\", amount: 0.1 }\r\n    ],\r\n  },\r\n  {\r\n    name: \"Quantum Entangler\",\r\n    itemsPerMin: 1,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Magnetic Field Generator\", amount: 1 },\r\n      { name: \"Stabilizer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Stabilizer\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 1 },\r\n      { name: \"Electric Motor\", amount: 1 },\r\n      { name: \"Gyroscope\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tank\",\r\n    itemsPerMin: 6,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 4 },\r\n      { name: \"Glass\", amount: 2 },\r\n      { name: \"Tungsten Ore\", amount: 4 },\r\n    ],\r\n  },\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { StyleSheet, Text, TextInput, View } from \"react-native\";\r\nimport { allItems, resources } from \"./ItemInfo\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nexport default function App() {\r\n  interface Ingredient {\r\n    name: string;\r\n    amount: number;\r\n    depth: number;\r\n    numberOfBuildings: number;\r\n    building: string;\r\n  }\r\n\r\n  interface Resources {\r\n    name: string;\r\n    building: string;\r\n    amount: number;\r\n  }\r\n\r\n  const [currentItem, setCurrentItem] = useState(\"Wood Plank\");\r\n  const [amount, setAmount] = useState(1);\r\n  const [ingredients, setIngredients] = useState<Ingredient[]>([]);\r\n  const [workshopLevel, setWorkShopLevel] = useState(1);\r\n  const [furnaceLevel, setFurnaceLevel] = useState(1);\r\n  const [machineShopLevel, setMachineShopLevel] = useState(1);\r\n  const [industrialFactoryLevel, setIndustrialFactoryLevel] = useState(1);\r\n  const [forgeLevel, setForgeLevel] = useState(1);\r\n  const [manufacturerLevel, setManufacturerLevel] = useState(1);\r\n  const [extractorLevel, setExtractorLevel] = useState(1);\r\n  const [rawResources, setRawResources] = useState({});\r\n  const [treeView, setTreeView] = useState(true);\r\n\r\n  var ingList: Ingredient[] = [];\r\n  var rawRes = {};\r\n\r\n  // OnLoad\r\n  useEffect(() => {\r\n    // Get all of the settings from storage\r\n    (async () => {\r\n      const ws = await getData(\"workshop\");\r\n      setWorkShopLevel(ws != \"\" ? parseInt(ws) : 1);\r\n      const fu = await getData(\"furnace\");\r\n      setFurnaceLevel(fu != \"\" ? parseInt(fu) : 1);\r\n      const ms = await getData(\"machineshop\");\r\n      setMachineShopLevel(ms != \"\" ? parseInt(ms) : 1);\r\n      const inf = await getData(\"industiralfactory\");\r\n      setIndustrialFactoryLevel(inf != \"\" ? parseInt(inf) : 1);\r\n      const fo = await getData(\"forge\");\r\n      setForgeLevel(fo != \"\" ? parseInt(fo) : 1);\r\n      const mf = await getData(\"manufacturer\");\r\n      setManufacturerLevel(mf != \"\" ? parseInt(mf) : 1);\r\n      const ex = await getData(\"extractor\");\r\n      setExtractorLevel(ex != \"\" ? parseInt(ex) : 1);\r\n    })();\r\n  }, []);\r\n\r\n  // If any params are updated then we want to recalculate the list\r\n  useEffect(() => {\r\n    ingList = [];\r\n    rawRes = {};\r\n\r\n    const ingInfo = allItems.find((item) => {\r\n      return item.name == currentItem;\r\n    });\r\n\r\n    const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n    const multiplier = levelMultiplier(buildingLevel!);\r\n    const numberOfBuildings = amount / ingInfo!.itemsPerMin / multiplier;\r\n\r\n    var building = ingInfo!.building;\r\n    addIng(currentItem, amount, 0, numberOfBuildings, building);\r\n    GenerateList(currentItem, amount);\r\n    setIngredients(ingList);\r\n  }, [\r\n    workshopLevel,\r\n    furnaceLevel,\r\n    machineShopLevel,\r\n    industrialFactoryLevel,\r\n    forgeLevel,\r\n    manufacturerLevel,\r\n    amount,\r\n    currentItem,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (ingList.length > 0) {\r\n      return;\r\n    }\r\n  }, [ingList]);\r\n\r\n  const addIng = (\r\n    name: string,\r\n    amount: number,\r\n    depth: number,\r\n    numberOfBuildings: number,\r\n    building: string\r\n  ) => {\r\n    ingList.push({\r\n      name: name,\r\n      amount: amount,\r\n      depth: depth,\r\n      numberOfBuildings: Math.ceil(numberOfBuildings),\r\n      building: building,\r\n    });\r\n  };\r\n\r\n  function getBuildingLevel(name: string) {\r\n    switch (name.toLowerCase()) {\r\n      case \"workshop\":\r\n        return workshopLevel;\r\n      case \"furnace\":\r\n        return furnaceLevel;\r\n      case \"machineshop\":\r\n        return machineShopLevel;\r\n      case \"industrialfactory\":\r\n        return industrialFactoryLevel;\r\n      case \"forge\":\r\n        return forgeLevel;\r\n      case \"manufacturer\":\r\n        return manufacturerLevel;\r\n      case \"extractor\":\r\n        return extractorLevel;\r\n      case \"Earth Transporter\":\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function levelMultiplier(level: number) {\r\n    switch (level) {\r\n      case 1:\r\n        return 1;\r\n      case 2:\r\n        return 1.5;\r\n      case 3:\r\n        return 2;\r\n      case 4:\r\n        return 3;\r\n      default:\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  const storeData = async (key: string, value: string) => {\r\n    try {\r\n      await AsyncStorage.setItem(key, value);\r\n    } catch (e) {\r\n      // saving error\r\n    }\r\n  };\r\n\r\n  const getData = async (key: string) => {\r\n    try {\r\n      const value = await AsyncStorage.getItem(key);\r\n      if (value !== null) {\r\n        return value;\r\n      }\r\n    } catch (e) {\r\n      // error reading value\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  function GenerateList(name: string, amountPerMin = 1, depth = 1) {\r\n    const itemInfo = allItems.find((item) => {\r\n      return item.name == name;\r\n    });\r\n\r\n    itemInfo?.ingredientList.forEach((ingredient) => {\r\n      const requireAmountPerMin = ingredient.amount * amountPerMin;\r\n\r\n      const buildingLevel = getBuildingLevel(\"extractor\");\r\n      const multiplier = levelMultiplier(buildingLevel!);\r\n      const numberOfBuildings = Math.ceil(\r\n        requireAmountPerMin / (7.5 * multiplier)\r\n      );\r\n\r\n      if (resources.includes(ingredient.name)) {\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          \"Extractor\"\r\n        );\r\n      } else {\r\n        const ingInfo = allItems.find((item) => {\r\n          return item.name == ingredient.name;\r\n        });\r\n        const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n        const multiplier = levelMultiplier(buildingLevel!);\r\n        const numberOfBuildings =\r\n          requireAmountPerMin / ingInfo!.itemsPerMin / multiplier;\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          ingInfo!.building\r\n        );\r\n        GenerateList(ingredient.name, requireAmountPerMin, depth + 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  function RenderSummary() {\r\n    return <View style={{ alignItems: \"flex-start\" }}></View>;\r\n  }\r\n\r\n  function RenderTree() {\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {ingredients.map((data) => {\r\n          if (data.amount == 0) {\r\n            return null;\r\n          }\r\n          return (\r\n            <Text style={{ paddingLeft: data.depth * 10 }}>\r\n              {data.amount} {data.name} ({data.numberOfBuildings}{\" \"}\r\n              {data.building})\r\n            </Text>\r\n          );\r\n        })}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={{ alignItems: \"center\" }}>\r\n      <View style={{ flexDirection: \"row\", alignItems: \"center\", padding: 5 }}>\r\n        <Text style={styles.buildingLevel}>Extractor Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            storeData(\"extractor\", input.replace(/[^1-4]/g, \"\"));\r\n            setExtractorLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={extractorLevel.toString()}\r\n        />\r\n        <Text style={styles.buildingLevel}>Workshop Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            storeData(\"workshop\", input.replace(/[^1-4]/g, \"\"));\r\n            setWorkShopLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={workshopLevel.toString()}\r\n        />\r\n        <Text style={styles.buildingLevel}>Furnace Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            storeData(\"furnace\", input.replace(/[^1-4]/g, \"\"));\r\n            setFurnaceLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={furnaceLevel.toString()}\r\n        />\r\n      </View>\r\n      <View style={{ flexDirection: \"row\", alignItems: \"center\", padding: 5 }}>\r\n        <Text style={styles.buildingLevel}>Machine Shop Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            storeData(\"machineshop\", input.replace(/[^1-4]/g, \"\"));\r\n            setMachineShopLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={machineShopLevel.toString()}\r\n        />\r\n        <Text style={styles.buildingLevel}>Industrial Factory Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            storeData(\"industrialfactory\", input.replace(/[^1-4]/g, \"\"));\r\n            setIndustrialFactoryLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={industrialFactoryLevel.toString()}\r\n        />\r\n        <Text style={styles.buildingLevel}>Forge Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            storeData(\"forge\", input.replace(/[^1-4]/g, \"\"));\r\n            setForgeLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={forgeLevel.toString()}\r\n        />\r\n      </View>\r\n      <View style={{ flexDirection: \"row\", alignItems: \"center\", padding: 5 }}>\r\n        <Text style={styles.buildingLevel}>Manufacturer Level:</Text>\r\n        <TextInput\r\n          style={styles.buildingLevelInput}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={(input) => {\r\n            storeData(\"manufacturer\", input.replace(/[^1-4]/g, \"\"));\r\n            setManufacturerLevel(Number(input.replace(/[^1-4]/g, \"\")));\r\n          }}\r\n          value={manufacturerLevel.toString()}\r\n        />\r\n      </View>\r\n      <View style={{ alignItems: \"center\" }}>\r\n        <View\r\n          style={{ flexDirection: \"row\", alignItems: \"center\", padding: 5 }}\r\n        >\r\n          <Text style={{ paddingRight: 5 }}>Items/Min</Text>\r\n          <TextInput\r\n            style={{\r\n              width: 75,\r\n              padding: 10,\r\n              borderColor: \"black\",\r\n              borderRadius: 5,\r\n              borderWidth: 1,\r\n              height: 40,\r\n            }}\r\n            keyboardType=\"numeric\"\r\n            onChangeText={(input) => {\r\n              setAmount(Number(input.replace(/[^0-9]./g, \"\")));\r\n            }}\r\n            value={amount.toString()}\r\n          />\r\n          <View style={{ width: 5 }} />\r\n\r\n          <Picker\r\n            style={{\r\n              width: 100,\r\n              padding: 10,\r\n              borderWidth: 1,\r\n              borderColor: \"#666\",\r\n              borderRadius: 5,\r\n              height: 40,\r\n            }}\r\n            selectedValue={currentItem}\r\n            onValueChange={(itemValue, itemIndex) => setCurrentItem(itemValue)}\r\n            itemStyle={{ borderColor: \"red\", borderWidth: 2, borderRadius: 5 }}\r\n          >\r\n            {allItems\r\n              .sort((a, b) => {\r\n                return a.name.localeCompare(b.name);\r\n              })\r\n              .map((data) => {\r\n                return <Picker.Item label={data.name} value={data.name} />;\r\n              })}\r\n          </Picker>\r\n        </View>\r\n      </View>\r\n\r\n      {treeView ? RenderTree() : RenderSummary()}\r\n\r\n      <View style={{ height: 50 }} />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: \"100%\",\r\n    height: \"50%\",\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    paddingBottom: 30,\r\n  },\r\n  buildingLevel: {\r\n    paddingLeft: 15,\r\n    paddingRight: 2,\r\n  },\r\n  buildingLevelInput: {\r\n    width: 30,\r\n    padding: 5,\r\n    borderColor: \"black\",\r\n    borderRadius: 5,\r\n    borderWidth: 1,\r\n    height: 30,\r\n  },\r\n});\r\n"],"sourceRoot":""}