{"version":3,"sources":["ItemInfo.tsx","App.tsx"],"names":["resources","allItems","name","itemsPerMin","building","value","ingredientList","amount","App","useState","currentItem","setCurrentItem","setAmount","ingredients","setIngredients","workshopLevel","furnaceLevel","machineShopLevel","industrialFactoryLevel","forgeLevel","manufacturerLevel","extractorLevel","ingList","useEffect","ingInfo","find","item","multiplier","levelMultiplier","getBuildingLevel","numberOfBuildings","addIng","GenerateList","amountPerMin","depth","itemInfo","forEach","ingredient","requireAmountPerMin","Math","ceil","includes","length","push","toLowerCase","level","View","style","alignItems","flexDirection","padding","Text","paddingRight","TextInput","width","borderColor","borderRadius","borderWidth","height","keyboardType","onChangeText","input","Number","replace","toString","marginVertical","selectedValue","onValueChange","itemValue","itemIndex","itemStyle","map","data","Item","label","paddingLeft","StyleSheet","create","container","flex","backgroundColor","justifyContent"],"mappings":"2LAAaA,EAAY,CACvB,aACA,WACA,WACA,QACA,OACA,cAGWC,EAAW,CACtB,CACEC,KAAM,aACNC,YAAa,GACbC,SAAU,WACVC,MAAO,EACPC,eAAgB,CAAC,CAAEJ,KAAM,WAAYK,OAAQ,KAE/C,CACEL,KAAM,aACNC,YAAa,IACbC,SAAU,WACVC,MAAO,EACPC,eAAgB,CAAC,CAAEJ,KAAM,aAAcK,OAAQ,KAEjD,CACEL,KAAM,cACNC,YAAa,GACbC,SAAU,WACVC,MAAO,EACPC,eAAgB,CAAC,CAAEJ,KAAM,eAAgBK,OAAQ,KAEnD,CACEL,KAAM,YACNC,YAAa,GACbC,SAAU,WACVC,MAAO,EACPC,eAAgB,CAAC,CAAEJ,KAAM,eAAgBK,OAAQ,KAEnD,CACEL,KAAM,YACNC,YAAa,GACbC,SAAU,WACVC,MAAO,EACPC,eAAgB,CAAC,CAAEJ,KAAM,aAAcK,OAAQ,KAEjD,CACEL,KAAM,eACNC,YAAa,GACbC,SAAU,WACVC,MAAO,EACPC,eAAgB,CAAC,CAAEJ,KAAM,aAAcK,OAAQ,KAEjD,CACEL,KAAM,YACNC,YAAa,GACbC,SAAU,WACVC,MAAO,GACPC,eAAgB,CAAC,CAAEJ,KAAM,QAASK,OAAQ,KAE5C,CACEL,KAAM,OACNC,YAAa,GACbC,SAAU,WACVC,MAAO,EACPC,eAAgB,CAAC,CAAEJ,KAAM,QAASK,OAAQ,KAE5C,CACEL,KAAM,iBACNC,YAAa,GACbC,SAAU,WACVC,MAAO,GACPC,eAAgB,CAAC,CAAEJ,KAAM,QAASK,OAAQ,KAE5C,CACEL,KAAM,eACNC,YAAa,IACbC,SAAU,WACVC,MAAO,GACPC,eAAgB,CAAC,CAAEJ,KAAM,WAAYK,OAAQ,KAE/C,CACEL,KAAM,UACNC,YAAa,EACbC,SAAU,WACVC,MAAO,GACPC,eAAgB,CAAC,CAAEJ,KAAM,mBAAoBK,OAAQ,KAEvD,CACEL,KAAM,aACNC,YAAa,GACbC,SAAU,UACVC,MAAO,EACPC,eAAgB,CAAC,CAAEJ,KAAM,WAAYK,OAAQ,KAE/C,CACEL,KAAM,eACNC,YAAa,GACbC,SAAU,UACVC,MAAO,EACPC,eAAgB,CAAC,CAAEJ,KAAM,aAAcK,OAAQ,KAEjD,CACEL,KAAM,WACNC,YAAa,GACbC,SAAU,UACVC,MAAO,EACPC,eAAgB,CAAC,CAAEJ,KAAM,OAAQK,OAAQ,KAE3C,CACEL,KAAM,QACNC,YAAa,GACbC,SAAU,UACVC,MAAO,EACPC,eAAgB,CAAC,CAAEJ,KAAM,OAAQK,OAAQ,KAE3C,CACEL,KAAM,eACNC,YAAa,GACbC,SAAU,UACVC,MAAO,EACPC,eAAgB,CAAC,CAAEJ,KAAM,aAAcK,OAAQ,KAEjD,CACEL,KAAM,gBACNC,YAAa,IACbC,SAAU,eACVC,MAAO,GACPC,eAAgB,CACd,CAAEJ,KAAM,cAAeK,OAAQ,GAC/B,CAAEL,KAAM,aAAcK,OAAQ,KAGlC,CACEL,KAAM,gBACNC,YAAa,GACbC,SAAU,eACVC,MAAO,GACPC,eAAgB,CACd,CAAEJ,KAAM,cAAeK,OAAQ,GAC/B,CAAEL,KAAM,WAAYK,OAAQ,KAGhC,CACEL,KAAM,cACNC,YAAa,EACbC,SAAU,eACVC,MAAO,GACPC,eAAgB,CACd,CAAEJ,KAAM,aAAcK,OAAQ,GAC9B,CAAEL,KAAM,eAAgBK,OAAQ,KAGpC,CACEL,KAAM,UACNC,YAAa,IACbC,SAAU,eACVC,MAAO,IACPC,eAAgB,CACd,CAAEJ,KAAM,gBAAiBK,OAAQ,GACjC,CAAEL,KAAM,WAAYK,OAAQ,KAGhC,CACEL,KAAM,QACNC,YAAa,GACbC,SAAU,eACVC,MAAO,GACPC,eAAgB,CACd,CAAEJ,KAAM,eAAgBK,OAAQ,GAChC,CAAEL,KAAM,YAAaK,OAAQ,KAGjC,CACEL,KAAM,YACNC,YAAa,EACbC,SAAU,eACVC,MAAO,GACPC,eAAgB,CACd,CAAEJ,KAAM,QAASK,OAAQ,GACzB,CAAEL,KAAM,eAAgBK,OAAQ,KAGpC,CACEL,KAAM,WACNC,YAAa,GACbC,SAAU,QACVC,MAAO,EACPC,eAAgB,CACd,CAAEJ,KAAM,WAAYK,OAAQ,GAC5B,CAAEL,KAAM,OAAQK,OAAQ,KAG5B,CACEL,KAAM,QACNC,YAAa,IACbC,SAAU,QACVC,MAAO,GACPC,eAAgB,CACd,CAAEJ,KAAM,WAAYK,OAAQ,GAC5B,CAAEL,KAAM,WAAYK,OAAQ,KAGhC,CACEL,KAAM,WACNC,YAAa,IACbC,SAAU,QACVC,MAAO,GACPC,eAAgB,CACd,CAAEJ,KAAM,OAAQK,OAAQ,IACxB,CAAEL,KAAM,YAAaK,OAAQ,KAGjC,CACEL,KAAM,mBACNC,YAAa,GACbC,SAAU,QACVC,MAAO,GACPC,eAAgB,CACd,CAAEJ,KAAM,eAAgBK,OAAQ,GAChC,CAAEL,KAAM,WAAYK,OAAQ,KAGhC,CACEL,KAAM,WACNC,YAAa,IACbC,SAAU,qBACVC,MAAO,GACPC,eAAgB,CACd,CAAEJ,KAAM,YAAaK,OAAQ,GAC7B,CAAEL,KAAM,cAAeK,OAAQ,GAC/B,CAAEL,KAAM,gBAAiBK,OAAQ,KAGrC,CACEL,KAAM,iBACNC,YAAa,EACbC,SAAU,qBACVC,MAAO,IACPC,eAAgB,CACd,CAAEJ,KAAM,YAAaK,OAAQ,GAC7B,CAAEL,KAAM,QAASK,OAAQ,GACzB,CAAEL,KAAM,UAAWK,OAAQ,KAG/B,CACEL,KAAM,sBACNC,YAAa,IACbC,SAAU,eACVC,MAAO,IACPC,eAAgB,CACd,CAAEJ,KAAM,iBAAkBK,OAAQ,GAClC,CAAEL,KAAM,gBAAiBK,OAAQ,GACjC,CAAEL,KAAM,cAAeK,OAAQ,GAC/B,CAAEL,KAAM,YAAaK,OAAQ,KAGjC,CACEL,KAAM,eACNC,YAAa,EACbC,SAAU,eACVC,MAAO,IACPC,eAAgB,CACd,CAAEJ,KAAM,YAAaK,OAAQ,GAC7B,CAAEL,KAAM,gBAAiBK,OAAQ,GACjC,CAAEL,KAAM,YAAaK,OAAQ,GAC7B,CAAEL,KAAM,UAAWK,OAAQ,KAG/B,CACEL,KAAM,iBACNC,YAAa,EACbC,SAAU,eACVC,MAAO,IACPC,eAAgB,CACd,CAAEJ,KAAM,WAAYK,OAAQ,GAC5B,CAAEL,KAAM,YAAaK,OAAQ,GAC7B,CAAEL,KAAM,eAAgBK,OAAQ,GAChC,CAAEL,KAAM,UAAWK,OAAQ,M,QChRlB,SAASC,IAStB,MAAsCC,mBAAS,cAA/C,WAAOC,EAAP,KAAoBC,EAApB,KACA,EAA4BF,mBAAS,IAArC,WAAOF,EAAP,KAAeK,EAAf,KACA,EAAsCH,mBAAuB,IAA7D,WAAOI,EAAP,KAAoBC,EAApB,KACA,EAA0CL,mBAAS,GAAnD,WAAOM,EAAP,KACA,GADA,KACwCN,mBAAS,IAAjD,WAAOO,EAAP,KACA,GADA,KACgDP,mBAAS,IAAzD,WAAOQ,EAAP,KACA,GADA,KAC4DR,mBAAS,IAArE,WAAOS,EAAP,KACA,GADA,KACoCT,mBAAS,IAA7C,WAAOU,EAAP,KACA,GADA,KACkDV,mBAAS,IAA3D,WAAOW,EAAP,KACA,GADA,KAC2CX,mBAAS,IAApD,WAAOY,EAAP,KAEIC,GAFJ,KAE4B,IAG5BC,qBAAU,WACRD,EAAU,GAEV,IAAME,EAAUvB,EAASwB,MAAK,SAACC,GAC7B,OAAOA,EAAKxB,MAAQQ,KAIhBiB,EAAaC,EADGC,EAAiBL,EAASpB,WAE1C0B,EAAoBvB,EAASiB,EAASrB,YAAcwB,EAEtDvB,EAAWoB,EAASpB,SACxB2B,EAAOrB,EAAaH,EAAQ,EAAGuB,EAAmB1B,GAsEpD,SAAS4B,EAAa9B,GAA4C,IAA9B+B,EAA6B,uDAAd,EAAGC,EAAW,uDAAH,EACtDC,EAAWlC,EAASwB,MAAK,SAACC,GAC9B,OAAOA,EAAKxB,MAAQA,KAGd,MAARiC,KAAU7B,eAAe8B,SAAQ,SAACC,GAChC,IAAMC,EAAsBD,EAAW9B,OAAS0B,EAE1CN,EAAaC,EADGC,EAAiB,cAEjCC,EAAoBS,KAAKC,KAAKjC,GAAU,IAAMoB,IACpD,GAAI3B,EAAUyC,SAASJ,EAAWnC,MAChC6B,EACEM,EAAWnC,KACXoC,EACAJ,EACAJ,EACA,iBAEG,CACL,IAAMN,EAAUvB,EAASwB,MAAK,SAACC,GAC7B,OAAOA,EAAKxB,MAAQmC,EAAWnC,QAI3ByB,EAAaC,EADGC,EAAiBL,EAASpB,WAE1C0B,EACJQ,EAAsBd,EAASrB,YAAcwB,EAC/CI,EACEM,EAAWnC,KACXoC,EACAJ,EACAJ,EACAN,EAASpB,UAGX4B,EAAaK,EAAWnC,KAAMoC,EAAqBJ,EAAQ,OAxG/DF,CAAatB,EAAaH,GAC1BO,EAAeQ,KACd,CACDP,EACAC,EACAC,EACAC,EACAC,EACAC,EACAb,EACAG,IAGFa,qBAAU,WACJD,EAAQoB,SAGX,CAACpB,IAEJ,IAAMS,EAAS,SACb7B,EACAK,EACA2B,EACAJ,EACA1B,GAEAkB,EAAQqB,KAAK,CACXzC,KAAMA,EACNK,OAAQA,EACR2B,MAAOA,EACPJ,kBAAmBS,KAAKC,KAAKV,GAC7B1B,SAAUA,KAId,SAASyB,EAAiB3B,GACxB,OAAQA,EAAK0C,eACX,IAAK,WACH,OAAO7B,EACT,IAAK,UACH,OAAOC,EACT,IAAK,cACH,OAAOC,EACT,IAAK,oBACH,OAAOC,EACT,IAAK,QACH,OAAOC,EACT,IAAK,eACH,OAAOC,EACT,IAAK,YACH,OAAOC,GAIb,SAASO,EAAgBiB,GACvB,OAAQA,GACN,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,IACT,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EACT,QACE,OAAO,GA4Cb,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,WAAY,WACzB,kBAACF,EAAA,EAAD,CAAMC,MAAO,CAAEC,WAAY,WACzB,kBAACF,EAAA,EAAD,CACEC,MAAO,CAAEE,cAAe,MAAOD,WAAY,SAAUE,QAAS,IAE9D,kBAACC,EAAA,EAAD,CAAMJ,MAAO,CAAEK,aAAc,IAA7B,aACA,kBAACC,EAAA,EAAD,CACEN,MAAO,CACLO,MAAO,GACPJ,QAAS,GACTK,YAAa,QACbC,aAAc,EACdC,YAAa,EACbC,OAAQ,IAEVC,aAAa,UACbC,aAAc,SAACC,GACbjD,EAAUkD,OAAOD,EAAME,QAAQ,UAAW,OAE5C1D,MAAOE,EAAOyD,aAEhB,kBAAClB,EAAA,EAAD,CAAMC,MAAO,CAAEO,MAAO,KAEtB,kBAAC,IAAD,CACEP,MAAO,CACLkB,eAAgB,GAChBX,MAAO,IACPJ,QAAS,GACTO,YAAa,EACbF,YAAa,OACbC,aAAc,EACdE,OAAQ,IAEVQ,cAAexD,EACfyD,cAAe,SAACC,EAAWC,GAAZ,OAA0B1D,EAAeyD,IACxDE,UAAW,CAAEf,YAAa,MAAOE,YAAa,EAAGD,aAAc,IAE9DvD,EAASsE,KAAI,SAACC,GACb,OAAO,kBAAC,IAAOC,KAAR,CAAaC,MAAOF,EAAKtE,KAAMG,MAAOmE,EAAKtE,aAK1D,kBAACiD,EAAA,EAAD,gBACW5C,EADX,IACoBG,EADpB,aAGA,kBAACyC,EAAA,EAAD,iCACA,kBAACL,EAAA,EAAD,CAAMC,MAAO,CAAEC,WAAY,eACxBnC,EAAY0D,KAAI,SAACC,GAChB,OAAmB,GAAfA,EAAKjE,OACA,KAGP,kBAAC4C,EAAA,EAAD,CAAMJ,MAAO,CAAE4B,YAA0B,GAAbH,EAAKtC,QAC9BsC,EAAKjE,OADR,IACiBiE,EAAKtE,KADtB,KAC8BsE,EAAK1C,kBAAmB,IACnD0C,EAAKpE,SAFR,UAWGwE,IAAWC,OAAO,CAC/BC,UAAW,CACTxB,MAAO,OACPI,OAAQ,MACRqB,KAAM,EACNC,gBAAiB,OACjBhC,WAAY,SACZiC,eAAgB,a","file":"static/js/app.f8ec73ab.chunk.js","sourcesContent":["export const resources = [\r\n  \"Copper Ore\",\r\n  \"Iron Ore\",\r\n  \"Wood Log\",\r\n  \"Stone\",\r\n  \"Coal\",\r\n  \"Wolframite\",\r\n];\r\n\r\nexport const allItems = [\r\n  {\r\n    name: \"Wood Plank\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Wood Log\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Wood Frame\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Wood Plank\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Copper Wire\",\r\n    itemsPerMin: 30,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Heat Sink\",\r\n    itemsPerMin: 10,\r\n    building: \"Workshop\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Iron Gear\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Iron Plating\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Steel Rod\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 35,\r\n    ingredientList: [{ name: \"Steel\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Sand\",\r\n    itemsPerMin: 40,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Stone\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Condenser Lens\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 12,\r\n    ingredientList: [{ name: \"Glass\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Carbon Fiber\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Graphite\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Coupler\",\r\n    itemsPerMin: 6,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Tungsten Carbide\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Iron Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Iron Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Copper Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Copper Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Silicone\",\r\n    itemsPerMin: 20,\r\n    building: \"Furnace\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Sand\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Glass\",\r\n    itemsPerMin: 10,\r\n    building: \"Furnace\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Sand\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Tungsten Ore\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Wolframite\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Electromagnet\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Machine Shop\",\r\n    value: 14,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 6 },\r\n      { name: \"Iron Ingot\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Logic Circuit\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 10,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 3 },\r\n      { name: \"Silicone\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Metal Frame\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Wood Frame\", amount: 1 },\r\n      { name: \"Iron Plating\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Battery\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Machine Shop\",\r\n    value: 150,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Graphite\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Rotor\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Iron Plating\", amount: 2 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Nano Wire\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Glass\", amount: 4 },\r\n      { name: \"Carbon Fiber\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Graphite\",\r\n    itemsPerMin: 15,\r\n    building: \"Forge\",\r\n    value: 6,\r\n    ingredientList: [\r\n      { name: \"Wood Log\", amount: 3 },\r\n      { name: \"Coal\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Steel\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Iron Ore\", amount: 6 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Concrete\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Sand\", amount: 10 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tungsten Carbide\",\r\n    itemsPerMin: 12,\r\n    building: \"Forge\",\r\n    value: 16,\r\n    ingredientList: [\r\n      { name: \"Tungsten Ore\", amount: 2 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Computer\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Industrial Factory\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Heat Sink\", amount: 3 },\r\n      { name: \"Metal Frame\", amount: 1 },\r\n      { name: \"Logic Circuit\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electric Motor\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 4 },\r\n      { name: \"Rotor\", amount: 2 },\r\n      { name: \"Battery\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electron Microscope\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Manufacturer\",\r\n    value: 300,\r\n    ingredientList: [\r\n      { name: \"Condenser Lens\", amount: 4 },\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Turbocharger\",\r\n    itemsPerMin: 4,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 8 },\r\n      { name: \"Logic Circuit\", amount: 4 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n      { name: \"Coupler\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Super Computer\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 1 },\r\n      { name: \"Heat Sink\", amount: 8 },\r\n      { name: \"Turbocharger\", amount: 1 },\r\n      { name: \"Coupler\", amount: 8 },\r\n    ],\r\n  },\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { StyleSheet, Text, TextInput, View } from \"react-native\";\r\nimport { allItems, resources } from \"./ItemInfo\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\n\r\nexport default function App() {\r\n  interface Ingredient {\r\n    name: string;\r\n    amount: number;\r\n    depth: number;\r\n    numberOfBuildings: number;\r\n    building: string;\r\n  }\r\n\r\n  const [currentItem, setCurrentItem] = useState(\"Wood Plank\");\r\n  const [amount, setAmount] = useState(50);\r\n  const [ingredients, setIngredients] = useState<Ingredient[]>([]);\r\n  const [workshopLevel, setWorkShopLevel] = useState(4);\r\n  const [furnaceLevel, setFurnaceLevel] = useState(4);\r\n  const [machineShopLevel, setMachineShopLevel] = useState(4);\r\n  const [industrialFactoryLevel, setIndustrialFactoryLevel] = useState(4);\r\n  const [forgeLevel, setForgeLevel] = useState(4);\r\n  const [manufacturerLevel, setManufacturerLevel] = useState(2);\r\n  const [extractorLevel, etExtractorLevel] = useState(4);\r\n\r\n  var ingList: Ingredient[] = [];\r\n\r\n  // If any params are updated then we want to recalculate the list\r\n  useEffect(() => {\r\n    ingList = [];\r\n\r\n    const ingInfo = allItems.find((item) => {\r\n      return item.name == currentItem;\r\n    });\r\n\r\n    const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n    const multiplier = levelMultiplier(buildingLevel!);\r\n    const numberOfBuildings = amount / ingInfo!.itemsPerMin / multiplier;\r\n\r\n    var building = ingInfo!.building;\r\n    addIng(currentItem, amount, 0, numberOfBuildings, building);\r\n    GenerateList(currentItem, amount);\r\n    setIngredients(ingList);\r\n  }, [\r\n    workshopLevel,\r\n    furnaceLevel,\r\n    machineShopLevel,\r\n    industrialFactoryLevel,\r\n    forgeLevel,\r\n    manufacturerLevel,\r\n    amount,\r\n    currentItem,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (ingList.length > 0) {\r\n      return;\r\n    }\r\n  }, [ingList]);\r\n\r\n  const addIng = (\r\n    name: string,\r\n    amount: number,\r\n    depth: number,\r\n    numberOfBuildings: number,\r\n    building: string\r\n  ) => {\r\n    ingList.push({\r\n      name: name,\r\n      amount: amount,\r\n      depth: depth,\r\n      numberOfBuildings: Math.ceil(numberOfBuildings),\r\n      building: building,\r\n    });\r\n  };\r\n\r\n  function getBuildingLevel(name: string) {\r\n    switch (name.toLowerCase()) {\r\n      case \"workshop\":\r\n        return workshopLevel;\r\n      case \"furnace\":\r\n        return furnaceLevel;\r\n      case \"machineshop\":\r\n        return machineShopLevel;\r\n      case \"industrialfactory\":\r\n        return industrialFactoryLevel;\r\n      case \"forge\":\r\n        return forgeLevel;\r\n      case \"manufacturer\":\r\n        return manufacturerLevel;\r\n      case \"extractor\":\r\n        return extractorLevel;\r\n    }\r\n  }\r\n\r\n  function levelMultiplier(level: number) {\r\n    switch (level) {\r\n      case 1:\r\n        return 1;\r\n      case 2:\r\n        return 1.5;\r\n      case 3:\r\n        return 2;\r\n      case 4:\r\n        return 3;\r\n      default:\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function GenerateList(name: string, amountPerMin = 1, depth = 1) {\r\n    const itemInfo = allItems.find((item) => {\r\n      return item.name == name;\r\n    });\r\n\r\n    itemInfo?.ingredientList.forEach((ingredient) => {\r\n      const requireAmountPerMin = ingredient.amount * amountPerMin;\r\n      const buildingLevel = getBuildingLevel(\"extractor\");\r\n      const multiplier = levelMultiplier(buildingLevel!);\r\n      const numberOfBuildings = Math.ceil(amount / (7.5 * multiplier));\r\n      if (resources.includes(ingredient.name)) {\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          \"Extractor\"\r\n        );\r\n      } else {\r\n        const ingInfo = allItems.find((item) => {\r\n          return item.name == ingredient.name;\r\n        });\r\n\r\n        const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n        const multiplier = levelMultiplier(buildingLevel!);\r\n        const numberOfBuildings =\r\n          requireAmountPerMin / ingInfo!.itemsPerMin / multiplier;\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          ingInfo!.building\r\n        );\r\n\r\n        GenerateList(ingredient.name, requireAmountPerMin, depth + 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <View style={{ alignItems: \"center\" }}>\r\n      <View style={{ alignItems: \"center\" }}>\r\n        <View\r\n          style={{ flexDirection: \"row\", alignItems: \"center\", padding: 5 }}\r\n        >\r\n          <Text style={{ paddingRight: 5 }}>Items/Min</Text>\r\n          <TextInput\r\n            style={{\r\n              width: 75,\r\n              padding: 10,\r\n              borderColor: \"black\",\r\n              borderRadius: 5,\r\n              borderWidth: 1,\r\n              height: 40,\r\n            }}\r\n            keyboardType=\"numeric\"\r\n            onChangeText={(input) => {\r\n              setAmount(Number(input.replace(/[^0-9]/g, \"\")));\r\n            }}\r\n            value={amount.toString()}\r\n          />\r\n          <View style={{ width: 5 }} />\r\n\r\n          <Picker\r\n            style={{\r\n              marginVertical: 30,\r\n              width: 300,\r\n              padding: 10,\r\n              borderWidth: 1,\r\n              borderColor: \"#666\",\r\n              borderRadius: 5,\r\n              height: 40,\r\n            }}\r\n            selectedValue={currentItem}\r\n            onValueChange={(itemValue, itemIndex) => setCurrentItem(itemValue)}\r\n            itemStyle={{ borderColor: \"red\", borderWidth: 2, borderRadius: 5 }}\r\n          >\r\n            {allItems.map((data) => {\r\n              return <Picker.Item label={data.name} value={data.name} />;\r\n            })}\r\n          </Picker>\r\n        </View>\r\n      </View>\r\n      <Text>\r\n        We want {amount} {currentItem} a minute\r\n      </Text>\r\n      <Text>------------------------</Text>\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {ingredients.map((data) => {\r\n          if (data.amount == 0) {\r\n            return null;\r\n          }\r\n          return (\r\n            <Text style={{ paddingLeft: data.depth * 10 }}>\r\n              {data.amount} {data.name} ({data.numberOfBuildings}{\" \"}\r\n              {data.building})\r\n            </Text>\r\n          );\r\n        })}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: \"100%\",\r\n    height: \"50%\",\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n"],"sourceRoot":""}