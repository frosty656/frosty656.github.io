{"version":3,"file":"static/js/main.63b20d3c.js","mappings":"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","sources":["ItemInfo.tsx","Components/NumericInput.tsx","App.tsx","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/create fake namespace object","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["export const resources = [\r\n  \"Copper Ore\",\r\n  \"Iron Ore\",\r\n  \"Wood Log\",\r\n  \"Stone\",\r\n  \"Coal\",\r\n  \"Wolframite\",\r\n];\r\n\r\nexport const allItems = [\r\n  {\r\n    name: \"Wood Plank\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Wood Log\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Wood Frame\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Wood Plank\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Copper Wire\",\r\n    itemsPerMin: 30,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 1.5 }],\r\n  },\r\n  {\r\n    name: \"Heat Sink\",\r\n    itemsPerMin: 10,\r\n    building: \"Workshop\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Copper Ingot\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Iron Gear\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Iron Plating\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Iron Ingot\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Steel Rod\",\r\n    itemsPerMin: 15,\r\n    building: \"Workshop\",\r\n    value: 35,\r\n    ingredientList: [{ name: \"Steel\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Sand\",\r\n    itemsPerMin: 40,\r\n    building: \"Workshop\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Stone\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Condenser Lens\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 12,\r\n    ingredientList: [{ name: \"Glass\", amount: 3 }],\r\n  },\r\n  {\r\n    name: \"Carbon Fiber\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Graphite\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Coupler\",\r\n    itemsPerMin: 6,\r\n    building: \"Workshop\",\r\n    value: 24,\r\n    ingredientList: [{ name: \"Tungsten Carbide\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Iron Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Iron Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Copper Ingot\",\r\n    itemsPerMin: 30,\r\n    building: \"Furnace\",\r\n    value: 1,\r\n    ingredientList: [{ name: \"Copper Ore\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Silicon\",\r\n    itemsPerMin: 20,\r\n    building: \"Furnace\",\r\n    value: 2,\r\n    ingredientList: [{ name: \"Sand\", amount: 2 }],\r\n  },\r\n  {\r\n    name: \"Glass\",\r\n    itemsPerMin: 10,\r\n    building: \"Furnace\",\r\n    value: 4,\r\n    ingredientList: [{ name: \"Sand\", amount: 4 }],\r\n  },\r\n  {\r\n    name: \"Tungsten Ore\",\r\n    itemsPerMin: 24,\r\n    building: \"Furnace\",\r\n    value: 5,\r\n    ingredientList: [{ name: \"Wolframite\", amount: 5 }],\r\n  },\r\n  {\r\n    name: \"Electromagnet\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Machine Shop\",\r\n    value: 14,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 6 },\r\n      { name: \"Iron Ingot\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Logic Circuit\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 10,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 3 },\r\n      { name: \"Silicon\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Metal Frame\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Wood Frame\", amount: 1 },\r\n      { name: \"Iron Plating\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Battery\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Machine Shop\",\r\n    value: 150,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Graphite\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Rotor\",\r\n    itemsPerMin: 10,\r\n    building: \"Machine Shop\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Iron Plating\", amount: 2 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Nano Wire\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Glass\", amount: 4 },\r\n      { name: \"Carbon Fiber\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Graphite\",\r\n    itemsPerMin: 15,\r\n    building: \"Forge\",\r\n    value: 6,\r\n    ingredientList: [\r\n      { name: \"Wood Log\", amount: 3 },\r\n      { name: \"Coal\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Steel\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 12,\r\n    ingredientList: [\r\n      { name: \"Iron Ore\", amount: 6 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Concrete\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Forge\",\r\n    value: 40,\r\n    ingredientList: [\r\n      { name: \"Sand\", amount: 10 },\r\n      { name: \"Steel Rod\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tungsten Carbide\",\r\n    itemsPerMin: 12,\r\n    building: \"Forge\",\r\n    value: 16,\r\n    ingredientList: [\r\n      { name: \"Tungsten Ore\", amount: 2 },\r\n      { name: \"Graphite\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Computer\",\r\n    itemsPerMin: 7.5,\r\n    building: \"Industrial Factory\",\r\n    value: 60,\r\n    ingredientList: [\r\n      { name: \"Heat Sink\", amount: 3 },\r\n      { name: \"Metal Frame\", amount: 1 },\r\n      { name: \"Logic Circuit\", amount: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electric Motor\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 4 },\r\n      { name: \"Rotor\", amount: 2 },\r\n      { name: \"Battery\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Electron Microscope\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Manufacturer\",\r\n    value: 300,\r\n    ingredientList: [\r\n      { name: \"Condenser Lens\", amount: 4 },\r\n      { name: \"Electromagnet\", amount: 8 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Turbocharger\",\r\n    itemsPerMin: 4,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Iron Gear\", amount: 8 },\r\n      { name: \"Logic Circuit\", amount: 4 },\r\n      { name: \"Nano Wire\", amount: 2 },\r\n      { name: \"Coupler\", amount: 4 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Super Computer\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 2 },\r\n      { name: \"Heat Sink\", amount: 8 },\r\n      { name: \"Turbocharger\", amount: 1 },\r\n      { name: \"Coupler\", amount: 8 },\r\n    ],\r\n  },\r\n  // Items that I have not unlocked myself\r\n  {\r\n    name: \"Atomic Locator\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 24 },\r\n      { name: \"Copper Wire\", amount: 50 },\r\n      { name: \"Electron Microscope\", amount: 2 },\r\n      { name: \"Super Computer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Earth Token\",\r\n    itemsPerMin: 1.428571429,\r\n    building: \"Earth Transporter\",\r\n    value: 250,\r\n    ingredientList: [{ name: \"Matter Duplicator\", amount: 1 }],\r\n  },\r\n  {\r\n    name: \"Energy Cube\",\r\n    itemsPerMin: 2,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Battery\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Gyroscope\",\r\n    itemsPerMin: 5,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Copper Wire\", amount: 12 },\r\n      { name: \"Rotor\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Industrial Frame\",\r\n    itemsPerMin: 3,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 6 },\r\n      { name: \"Metal Frame\", amount: 2 },\r\n      { name: \"Tungsten Carbide\", amount: 8 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Magnetic Field Generator\",\r\n    itemsPerMin: 1.5,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electromagnet\", amount: 10 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n      { name: \"Nano Wire\", amount: 10 },\r\n      { name: \"Stabilizer\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Compressor\",\r\n    itemsPerMin: 2,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Electric Motor\", amount: 2 },\r\n      { name: \"Tank\", amount: 1 },\r\n      { name: \"Turbocharger\", amount: 2 },\r\n      { name: \"Industrial Frame\", amount: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Matter Duplicator\",\r\n    itemsPerMin: 2 / 3,\r\n    building: \"Manufacturer\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Atomic Locator\", amount: 4 },\r\n      { name: \"Energy Cube\", amount: 5 },\r\n      { name: \"Particle Glue\", amount: 100 },\r\n      { name: \"Quantum Entangler\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Particle Glue\",\r\n    itemsPerMin: 20,\r\n    building: \"Workshop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Matter Compressor\", amount: 0.1 }\r\n    ],\r\n  },\r\n  {\r\n    name: \"Quantum Entangler\",\r\n    itemsPerMin: 1,\r\n    building: \"Machine Shop\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Magnetic Field Generator\", amount: 1 },\r\n      { name: \"Stabilizer\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Stabilizer\",\r\n    itemsPerMin: 2.5,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Computer\", amount: 1 },\r\n      { name: \"Electric Motor\", amount: 1 },\r\n      { name: \"Gyroscope\", amount: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Tank\",\r\n    itemsPerMin: 6,\r\n    building: \"Industrial Factory\",\r\n    value: 250,\r\n    ingredientList: [\r\n      { name: \"Concrete\", amount: 4 },\r\n      { name: \"Glass\", amount: 2 },\r\n      { name: \"Tungsten Carbide\", amount: 4 },\r\n    ],\r\n  },\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n  Button,\r\n} from \"react-native\";\r\n\r\nexport default function NumbericInput({\r\n  height = 100,\r\n  width = 100,\r\n  incrementButtonStyle = {\r\n    backgroundColor: \"#FFCCCB\",\r\n    alignitems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  decrementButtonStyle = {\r\n    backgroundColor: \"#90EE90\",\r\n    alignitems: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  value = \"0\",\r\n  title = \"\",\r\n  onChange = (value: number) => {\r\n    console.log(value);\r\n  },\r\n  max = 1000000,\r\n  min = 1,\r\n  showButtons = true,\r\n  stepSize = 1,\r\n  updateOnStateChange = false,\r\n  allowDecimal = false,\r\n  ...otherProps\r\n}) {\r\n  const [lastValue, setLastValue] = React.useState(\"\");\r\n  const [currentValue, setCurrentValue] = React.useState(value);\r\n\r\n  useEffect(() => {\r\n    if (updateOnStateChange) {\r\n      setCurrentValue(value);\r\n    }\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    if (currentValue.slice(-1) != \".\") {\r\n      onChange(Number(currentValue));\r\n    }\r\n  }, [currentValue]);\r\n\r\n  function getNumericInput(text: string) {\r\n    {\r\n      text = text.replaceAll(\",\", \".\");\r\n      if (text.length == 0 && updateOnStateChange) {\r\n        setLastValue(\"\");\r\n        setCurrentValue(\"0\");\r\n        return;\r\n      }\r\n      console.log(text);\r\n      let sanitizedString = \"\";\r\n      let hasDecimal = false;\r\n      text.split(\"\").forEach((char) => {\r\n        if (\"1234567890.\".includes(char)) {\r\n          if (char == \".\") {\r\n            if (!hasDecimal && allowDecimal) {\r\n              hasDecimal = true;\r\n              sanitizedString += char;\r\n            }\r\n          } else {\r\n            sanitizedString += char;\r\n          }\r\n        }\r\n      });\r\n      if (sanitizedString.length == 0) {\r\n        setCurrentValue(\"\");\r\n        setLastValue(\"\");\r\n        return;\r\n      }\r\n      if (Number(sanitizedString) > max) {\r\n        sanitizedString = max.toString();\r\n      }\r\n      if (Number(sanitizedString) < min) {\r\n        sanitizedString = min.toString();\r\n      }\r\n      console.log(sanitizedString);\r\n      if (sanitizedString != lastValue) {\r\n        setCurrentValue(sanitizedString);\r\n        setLastValue(sanitizedString);\r\n      }\r\n    }\r\n  }\r\n\r\n  function plusButton() {\r\n    if (showButtons) {\r\n      return (\r\n        <TouchableOpacity\r\n          style={[\r\n            decrementButtonStyle,\r\n            {\r\n              borderTopLeftRadius: 10,\r\n              borderBottomLeftRadius: 10,\r\n              width: width / 4,\r\n              height: height,\r\n              justifyContent: \"center\",\r\n            },\r\n          ]}\r\n          onPress={() => getNumericInput((Number(value) - stepSize).toString())}\r\n        >\r\n          <Text>-</Text>\r\n        </TouchableOpacity>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function minusButton() {\r\n    if (showButtons) {\r\n      return (\r\n        <TouchableOpacity\r\n          style={[\r\n            incrementButtonStyle,\r\n            {\r\n              borderBottomRightRadius: 10,\r\n              borderTopRightRadius: 10,\r\n              width: width / 4,\r\n              height: height,\r\n              justifyContent: \"center\",\r\n            },\r\n          ]}\r\n          onPress={() => getNumericInput((Number(value) + stepSize).toString())}\r\n        >\r\n          <Text>+</Text>\r\n        </TouchableOpacity>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function textInput() {\r\n    if (showButtons) {\r\n      return (\r\n        <TextInput\r\n          value={currentValue}\r\n          style={{\r\n            width: width / 2,\r\n            textAlign: \"center\",\r\n            borderColor: \"#D3D3D3\",\r\n            borderWidth: 1,\r\n            height: height,\r\n          }}\r\n          onChangeText={(text) => getNumericInput(text)}\r\n          keyboardType=\"numeric\"\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <TextInput\r\n          value={currentValue}\r\n          style={{\r\n            width: width,\r\n            textAlign: \"center\",\r\n            borderColor: \"#D3D3D3\",\r\n            borderWidth: 1,\r\n            height: height,\r\n            borderRadius: 10,\r\n          }}\r\n          onChangeText={(text) => getNumericInput(text)}\r\n          keyboardType={allowDecimal ? \"decimal-pad\" : \"numeric\"}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        alignItems: \"center\",\r\n        paddingHorizontal: 10,\r\n        paddingVertical: 5,\r\n      }}\r\n    >\r\n      <Text>{title}</Text>\r\n      <View\r\n        style={{\r\n          width: width,\r\n          height: height,\r\n          alignItems: \"center\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        {plusButton()}\r\n        {textInput()}\r\n        {minusButton()}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n","// https://www.npmjs.com/package/react-native-numeric-input\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\r\nimport { allItems, resources } from \"./ItemInfo\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nimport NumericInput from \"./Components/NumericInput\";\r\n\r\n// Test commit for jenkins\r\n\r\nexport default function App() {\r\n  interface Ingredient {\r\n    name: string;\r\n    amount: number;\r\n    depth: number;\r\n    numberOfBuildings: number;\r\n    building: string;\r\n  }\r\n\r\n  interface Resources {\r\n    Name: string;\r\n    Amount: number;\r\n    Building: string;\r\n  }\r\n  const [treeView, setTreeView] = useState('tree');\r\n  const [currentItem, setCurrentItem] = useState(\"Wood Plank\");\r\n  const [amount, setAmount] = useState(1);\r\n  const [ingredients, setIngredients] = useState<Ingredient[]>([]);\r\n  const [rawResources, setRawResources] = useState<Resources[]>([]);\r\n\r\n  const [workshopLevel, setWorkShopLevel] = useState(1);\r\n  const [furnaceLevel, setFurnaceLevel] = useState(1);\r\n  const [machineShopLevel, setMachineShopLevel] = useState(1);\r\n  const [industrialFactoryLevel, setIndustrialFactoryLevel] = useState(1);\r\n  const [forgeLevel, setForgeLevel] = useState(1);\r\n  const [manufacturerLevel, setManufacturerLevel] = useState(1);\r\n  const [extractorLevel, setExtractorLevel] = useState(1);\r\n  const [beltIPM, setBeltIPM] = useState(420);\r\n\r\n  const [maxItemPerMin, setMaxItemPerMin] = useState(0);\r\n  const [woodExtractorAmount, setWoodExtractorAmount] = useState(50);\r\n  const [stoneExtractorAmount, setStoneExtractorAmount] = useState(50);\r\n  const [ironExtractorAmount, setIronExtractorAmount] = useState(50);\r\n  const [copperExtractorAmount, SetCopperExtractorAmount] = useState(50);\r\n  const [wolframiteExtractorAmount, setWolframiteExtractorAmount] =\r\n    useState(50);\r\n  const [coalExtractorAmount, setCoalExtractorAmount] = useState(50);\r\n\r\n  var ingList: Ingredient[] = [];\r\n  var resourceCount: Resources[] = [];\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Onload\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const value = await AsyncStorage.getItem(\"@info\");\r\n        if (value !== null) {\r\n          const info = JSON.parse(value);\r\n          setWoodExtractorAmount(info.woodExtractorAmount ?? 50);\r\n          setStoneExtractorAmount(info.stoneExtractorAmount ?? 50);\r\n          setIronExtractorAmount(info.ironExtractorAmount ?? 50);\r\n          SetCopperExtractorAmount(info.copperExtractorAmount ?? 50);\r\n          setWolframiteExtractorAmount(info.wolframiteExtractorAmount ?? 50);\r\n          setCoalExtractorAmount(info.coalExtractorAmount ?? 50);\r\n          setWorkShopLevel(info.workshopLevel ?? 1);\r\n          setFurnaceLevel(info.furnaceLevel ?? 1);\r\n          setMachineShopLevel(info.machineShopLevel ?? 1);\r\n          setIndustrialFactoryLevel(info.industrialFactoryLevel ?? 1);\r\n          setForgeLevel(info.forgeLevel ?? 1);\r\n          setManufacturerLevel(info.manufacturerLevel ?? 1);\r\n          setExtractorLevel(info.extractorLevel ?? 1);\r\n          setAmount(info.amount ?? 1);\r\n          setCurrentItem(info.currentItem ?? \"Wood Plank\");\r\n          setBeltIPM(info.beltIPM ?? 420);\r\n\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error: \" + e);\r\n      }\r\n      setIsLoading(false);\r\n    })();\r\n  }, []);\r\n\r\n  // Onsave\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      return;\r\n    }\r\n    const data = {\r\n      woodExtractorAmount: woodExtractorAmount,\r\n      stoneExtractorAmount: stoneExtractorAmount,\r\n      ironExtractorAmount: ironExtractorAmount,\r\n      copperExtractorAmount: copperExtractorAmount,\r\n      wolframiteExtractorAmount: wolframiteExtractorAmount,\r\n      coalExtractorAmount: coalExtractorAmount,\r\n      extractorLevel: extractorLevel,\r\n      workshopLevel: workshopLevel,\r\n      furnaceLevel: furnaceLevel,\r\n      machineShopLevel: machineShopLevel,\r\n      industrialFactoryLevel: industrialFactoryLevel,\r\n      forgeLevel: forgeLevel,\r\n      manufacturerLevel: manufacturerLevel,\r\n      amount: amount,\r\n      currentItem: currentItem,\r\n      beltIPM: beltIPM,\r\n\r\n    };\r\n\r\n    (async () => {\r\n      try {\r\n        await AsyncStorage.setItem(\"@info\", JSON.stringify(data));\r\n      } catch (e) {\r\n        console.log(\"Error saving data \" + e);\r\n      }\r\n    })();\r\n  }),\r\n    [\r\n      woodExtractorAmount,\r\n      stoneExtractorAmount,\r\n      ironExtractorAmount,\r\n      copperExtractorAmount,\r\n      wolframiteExtractorAmount,\r\n      coalExtractorAmount,\r\n      extractorLevel,\r\n      workshopLevel,\r\n      furnaceLevel,\r\n      machineShopLevel,\r\n      industrialFactoryLevel,\r\n      forgeLevel,\r\n      manufacturerLevel,\r\n      amount,\r\n      currentItem,\r\n      beltIPM,\r\n    ];\r\n\r\n  // If any params are updated then we want to recalculate the list\r\n  useEffect(() => {\r\n    ingList = [];\r\n    resourceCount = [];\r\n\r\n    const ingInfo = allItems.find((item) => {\r\n      return item.name == currentItem;\r\n    });\r\n\r\n    const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n    const multiplier = levelMultiplier(buildingLevel!);\r\n    const numberOfBuildings = amount / ingInfo!.itemsPerMin / multiplier;\r\n\r\n    var building = ingInfo!.building;\r\n    addIng(currentItem, amount, 0, numberOfBuildings, building);\r\n    GenerateList(currentItem, amount);\r\n    setIngredients(ingList);\r\n    setRawResources(resourceCount);\r\n  }, [\r\n    workshopLevel,\r\n    furnaceLevel,\r\n    machineShopLevel,\r\n    industrialFactoryLevel,\r\n    forgeLevel,\r\n    manufacturerLevel,\r\n    extractorLevel,\r\n    amount,\r\n    currentItem,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    let maxOutput = Infinity;\r\n    resources.forEach((resource) => {\r\n      let resourceAmount = 0;\r\n      rawResources.forEach((rawResource) => {\r\n        if (rawResource.Name == resource) {\r\n          resourceAmount = rawResource.Amount;\r\n        }\r\n      });\r\n\r\n      if (resourceAmount > 0) {\r\n        let ipm = getResourceAmount(resource) / resourceAmount;\r\n        if (ipm < maxOutput) {\r\n          maxOutput = ipm;\r\n        }\r\n      }\r\n    });\r\n\r\n    setMaxItemPerMin(Number((maxOutput * amount).toFixed(4)));\r\n  }, [\r\n    rawResources,\r\n    woodExtractorAmount,\r\n    stoneExtractorAmount,\r\n    ironExtractorAmount,\r\n    copperExtractorAmount,\r\n    wolframiteExtractorAmount,\r\n    coalExtractorAmount,\r\n  ]);\r\n\r\n  const addIng = (\r\n    name: string,\r\n    amount: number,\r\n    depth: number,\r\n    numberOfBuildings: number,\r\n    building: string\r\n  ) => {\r\n    // Add to the sum list\r\n    var itemInArray = false;\r\n    resourceCount.forEach((element) => {\r\n      if (element.Name == name) {\r\n        element.Amount += amount;\r\n        itemInArray = true;\r\n      }\r\n    });\r\n\r\n    if (!itemInArray) {\r\n      resourceCount.push({\r\n        Name: name,\r\n        Amount: amount,\r\n        Building: building,\r\n      });\r\n    }\r\n\r\n    ingList.push({\r\n      name: name,\r\n      amount: amount,\r\n      depth: depth,\r\n      numberOfBuildings: +(numberOfBuildings.toFixed(2)),\r\n      building: building,\r\n    });\r\n  };\r\n\r\n  function extractorOutput(level: number) {\r\n    switch (level) {\r\n      case 1:\r\n        return 7.5;\r\n      case 2:\r\n        return 11.25;\r\n      case 3:\r\n        return 15;\r\n      case 4:\r\n        return 22.5;\r\n      case 5:\r\n        return 30;\r\n      default:\r\n        return 7.5;\r\n    }\r\n  }\r\n\r\n  function getResourceAmount(name: string) {\r\n    let outputPerExtractor = Number(\r\n      extractorOutput(getBuildingLevel(\"extractor\"))\r\n    );\r\n    switch (name.toLowerCase()) {\r\n      case \"wood log\":\r\n        return outputPerExtractor * woodExtractorAmount;\r\n      case \"stone\":\r\n        return outputPerExtractor * stoneExtractorAmount;\r\n      case \"iron ore\":\r\n        return outputPerExtractor * ironExtractorAmount;\r\n      case \"copper ore\":\r\n        return outputPerExtractor * copperExtractorAmount;\r\n      case \"wolframite\":\r\n        return outputPerExtractor * wolframiteExtractorAmount;\r\n      case \"coal\":\r\n        return outputPerExtractor * coalExtractorAmount;\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  function getBuildingLevel(name: string) {\r\n    switch (name.toLowerCase()) {\r\n      case \"workshop\":\r\n        return workshopLevel;\r\n      case \"furnace\":\r\n        return furnaceLevel;\r\n      case \"machine shop\":\r\n        return machineShopLevel;\r\n      case \"industrial factory\":\r\n        return industrialFactoryLevel;\r\n      case \"forge\":\r\n        return forgeLevel;\r\n      case \"manufacturer\":\r\n        return manufacturerLevel;\r\n      case \"extractor\":\r\n        return extractorLevel;\r\n      case \"earth transporter\":\r\n        return 1;\r\n      default:\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function levelMultiplier(level: number) {\r\n    switch (level) {\r\n      case 1:\r\n        return 1;\r\n      case 2:\r\n        return 1.5;\r\n      case 3:\r\n        return 2;\r\n      case 4:\r\n        return 3;\r\n      case 5:\r\n        return 4;\r\n      default:\r\n        return 1;\r\n    }\r\n  }\r\n\r\n  function GenerateList(name: string, amountPerMin = 1, depth = 1) {\r\n    const itemInfo = allItems.find((item) => {\r\n      return item.name == name;\r\n    });\r\n\r\n    itemInfo?.ingredientList.forEach((ingredient) => {\r\n      const requireAmountPerMin = ingredient.amount * amountPerMin;\r\n      const buildingLevel = getBuildingLevel(\"extractor\");\r\n      const multiplier = levelMultiplier(buildingLevel!);\r\n\r\n      const numberOfBuildings = +((\r\n        requireAmountPerMin / (7.5 * multiplier)\r\n      ).toFixed(2));\r\n\r\n      if (resources.includes(ingredient.name)) {\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          \"Extractor\"\r\n        );\r\n      } else {\r\n        const ingInfo = allItems.find((item) => {\r\n          return item.name == ingredient.name;\r\n        });\r\n        const buildingLevel = getBuildingLevel(ingInfo!.building);\r\n        const multiplier = levelMultiplier(buildingLevel!);\r\n        const numberOfBuildings =\r\n          requireAmountPerMin / ingInfo!.itemsPerMin / multiplier;\r\n        addIng(\r\n          ingredient.name,\r\n          requireAmountPerMin,\r\n          depth,\r\n          numberOfBuildings,\r\n          ingInfo!.building\r\n        );\r\n        GenerateList(ingredient.name, requireAmountPerMin, depth + 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  function renderList() {\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {ingredients.map((data) => {\r\n          if (data.amount == 0) {\r\n            return null;\r\n          }\r\n          return (\r\n            <Text style={{ paddingLeft: data.depth * 10 }}>\r\n              {data.amount.toFixed(2)} {data.name} ({data.numberOfBuildings}{\" \"}\r\n              {data.building}, {(data.amount / beltIPM).toFixed(2)} belts out)\r\n            </Text>\r\n          );\r\n        })}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  function renderTopologicalView() {\r\n    let dag = new Map<string, Resources[]>();\r\n    let stack: string[] = [];\r\n\r\n    ingredients.forEach((data) => {\r\n      if (!dag.has(data.name)) {\r\n        dag.set(data.name, []);\r\n      }\r\n\r\n      while (data.depth < stack.length) {\r\n        stack.pop();\r\n      }\r\n\r\n      if (stack.length > 0) {\r\n        let last = stack[stack.length - 1];\r\n        let dependencies = dag.get(last)!;\r\n\r\n        let dep = dependencies.find((dep) => dep.Name == data.name);\r\n\r\n        if (dep === undefined) {\r\n          dependencies.push({Name: data.name, Amount: data.amount, Building: ''});\r\n        } else {\r\n          dep.Amount += data.amount;\r\n        }\r\n      }\r\n\r\n      stack.push(data.name);\r\n    });\r\n\r\n    let order: string[] = [];\r\n\r\n    function dfs(node: string) {\r\n      if (order.findIndex((name) => name === node) !== -1) {\r\n        return;\r\n      }\r\n\r\n      let dependencies = dag.get(node)!;\r\n\r\n      dependencies.forEach((dependency) => {\r\n        dfs(dependency.Name);\r\n      });\r\n\r\n      order.push(node);\r\n    }\r\n\r\n    dfs(ingredients[0].name);\r\n    order = order.reverse();\r\n\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {\r\n          order.map((name) => {\r\n            let data = rawResources.find((resource) => resource.Name == name)!;\r\n            // The amount of items that a single building can produce (at level 1)\r\n            var itemsPerMin = 0;\r\n\r\n            if (resources.includes(data.Name)) {\r\n              itemsPerMin = 7.5;\r\n            } else {\r\n              const ingInfo = allItems.find((item) => {\r\n                return item.name == data.Name;\r\n              });\r\n              itemsPerMin = ingInfo!.itemsPerMin;\r\n            }\r\n\r\n            // Account for building levels increasing output\r\n            const buildingLevel = getBuildingLevel(data.Building);\r\n            const multiplier = levelMultiplier(buildingLevel!);\r\n            const numberOfBuildings = data.Amount / (itemsPerMin * multiplier);\r\n\r\n            let dependencies = dag.get(name)!.map((dep) => {\r\n              let resource = rawResources.find((resource) => resource.Name == dep.Name)!;\r\n              let percent = dep.Amount / resource.Amount * 100;\r\n\r\n              return (<Text style={{paddingLeft:20}}>\r\n                {dep.Name}: {dep.Amount.toFixed(2)} ({percent.toFixed(2)}%, {(dep.Amount / beltIPM).toFixed(2)} belts in)\r\n              </Text>);\r\n            });\r\n\r\n            return (\r\n              <>\r\n              <Text>\r\n                {data.Name}: {data.Amount.toFixed(2)} (\r\n                {(numberOfBuildings.toFixed(2))} {data.Building}, {(data.Amount / beltIPM).toFixed(2)} belts out)\r\n              </Text>\r\n              {dependencies}\r\n              <Text>{' '}</Text>\r\n              </>\r\n            );\r\n          })\r\n          }\r\n      </View>\r\n    );\r\n  }\r\n\r\n  // We should give these elements an id\r\n  function renderSummaryView() {\r\n    return (\r\n      <View style={{ alignItems: \"flex-start\" }}>\r\n        {rawResources\r\n          .sort((a, b) => {\r\n            return a.Name.localeCompare(b.Name);\r\n          })\r\n          .map((data) => {\r\n            // The amount of items that a single building can produce (at level 1)\r\n            var itemsPerMin = 0;\r\n\r\n            if (resources.includes(data.Name)) {\r\n              itemsPerMin = 7.5;\r\n            } else {\r\n              const ingInfo = allItems.find((item) => {\r\n                return item.name == data.Name;\r\n              });\r\n              itemsPerMin = ingInfo!.itemsPerMin;\r\n            }\r\n\r\n            // Account for building levels increasing output\r\n            const buildingLevel = getBuildingLevel(data.Building);\r\n            const multiplier = levelMultiplier(buildingLevel!);\r\n            const numberOfBuildings = data.Amount / (itemsPerMin * multiplier);\r\n            return (\r\n              <Text>\r\n                {data.Name}: {data.Amount.toFixed(2)} (\r\n                {(numberOfBuildings.toFixed(2))} {data.Building})\r\n              </Text>\r\n            );\r\n          })}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  function enterTotalExtractorAmount() {\r\n    return (\r\n      <View\r\n        style={{\r\n          flexDirection: \"row\",\r\n          alignItems: \"center\",\r\n          padding: 5,\r\n          flexWrap: \"wrap\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <NumericInput\r\n          title={\"Wood Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={woodExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setWoodExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Stone Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={stoneExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setStoneExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Copper Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={copperExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            SetCopperExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Iron Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={ironExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setIronExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Coal Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={coalExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setCoalExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Wolframite Extractors\"}\r\n          width={100}\r\n          height={30}\r\n          value={wolframiteExtractorAmount.toString()}\r\n          onChange={(value: number) => {\r\n            setWolframiteExtractorAmount(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n        <NumericInput\r\n          title={\"Belt Items/Min\"}\r\n          width={100}\r\n          height={30}\r\n          value={beltIPM.toString()}\r\n          onChange={(value: number) => {\r\n            setBeltIPM(value);\r\n          }}\r\n          max={1000}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n  if (!isLoading) {\r\n    let productionView;\r\n\r\n    switch (treeView) {\r\n      case 'topological':\r\n        productionView = renderTopologicalView();\r\n        break;\r\n      case 'summary':\r\n        productionView = renderSummaryView();\r\n        break;\r\n      default:\r\n        productionView = renderList();\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <View style={{ alignItems: \"center\" }}>\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            padding: 5,\r\n            flexWrap: \"wrap\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <NumericInput\r\n            title={\"Extractor\"}\r\n            width={100}\r\n            height={30}\r\n            value={extractorLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setExtractorLevel(value);\r\n            }}\r\n            max={5}\r\n          />\r\n          <NumericInput\r\n            title={\"Workshop\"}\r\n            width={100}\r\n            height={30}\r\n            value={workshopLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setWorkShopLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Furnace\"}\r\n            width={100}\r\n            height={30}\r\n            value={furnaceLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setFurnaceLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Machine Shop\"}\r\n            width={100}\r\n            height={30}\r\n            value={machineShopLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setMachineShopLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Industrial Factory\"}\r\n            width={100}\r\n            height={30}\r\n            value={industrialFactoryLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setIndustrialFactoryLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Forge\"}\r\n            width={100}\r\n            height={30}\r\n            value={forgeLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setForgeLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n          <NumericInput\r\n            title={\"Manufacturer\"}\r\n            width={100}\r\n            height={30}\r\n            value={manufacturerLevel.toString()}\r\n            onChange={(value: number) => {\r\n              setManufacturerLevel(value);\r\n            }}\r\n            max={4}\r\n          />\r\n        </View>\r\n        {enterTotalExtractorAmount()}\r\n\r\n        <View style={{ alignItems: \"center\" }}>\r\n          <View\r\n            style={{\r\n              flexDirection: \"row\",\r\n              alignItems: \"center\",\r\n              padding: 10,\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <View>\r\n              <Text>Max Output</Text>\r\n              <TouchableOpacity\r\n                style={{\r\n                  height: 45,\r\n                  width: 100,\r\n                  borderColor: \"black\",\r\n                  borderRadius: 5,\r\n                  borderWidth: 1,\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n                onPress={() => setAmount(maxItemPerMin)}\r\n              >\r\n                <Text style={{ fontSize: 8 }}>(Press Me)</Text>\r\n                <Text>{maxItemPerMin.toFixed(2)}</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n            <NumericInput\r\n              title={\"Items/Min\"}\r\n              width={125}\r\n              height={45}\r\n              value={amount.toString()}\r\n              onChange={(value: number) => {\r\n                setAmount(value);\r\n              }}\r\n              max={10000}\r\n              min={0}\r\n              showButtons={false}\r\n              updateOnStateChange={true}\r\n              allowDecimal={true}\r\n            />\r\n\r\n            <Picker\r\n              style={{\r\n                width: 100,\r\n                padding: 5,\r\n                borderWidth: 1,\r\n                borderColor: \"#666\",\r\n                borderRadius: 5,\r\n                height: 40,\r\n              }}\r\n              selectedValue={currentItem}\r\n              onValueChange={(itemValue, itemIndex) =>\r\n                setCurrentItem(itemValue)\r\n              }\r\n              itemStyle={{\r\n                borderColor: \"red\",\r\n                borderWidth: 2,\r\n                borderRadius: 5,\r\n              }}\r\n            >\r\n              {allItems\r\n                .sort((a, b) => {\r\n                  return a.name.localeCompare(b.name);\r\n                })\r\n                .map((data) => {\r\n                  return <Picker.Item label={data.name} value={data.name} />;\r\n                })}\r\n            </Picker>\r\n          </View>\r\n        </View>\r\n\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            width: 500,\r\n            alignSelf: \"center\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <TouchableOpacity\r\n            style={{\r\n              height: 50,\r\n              width: \"25%\",\r\n              borderColor: \"black\",\r\n              borderRadius: 5,\r\n              borderWidth: 1,\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              backgroundColor: treeView === 'tree' ? \"#D3D3D3\" : \"white\",\r\n            }}\r\n            onPress={() => {\r\n              setTreeView('tree');\r\n            }}\r\n          >\r\n            <Text style={{ padding: 5 }}>Tree View</Text>\r\n          </TouchableOpacity>\r\n          <View style={{ width: 5 }} />\r\n          <TouchableOpacity\r\n            style={{\r\n              height: 50,\r\n              width: \"25%\",\r\n              borderColor: \"black\",\r\n              borderRadius: 5,\r\n              borderWidth: 1,\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              backgroundColor: treeView === 'summary' ? \"#D3D3D3\" : \"white\",\r\n            }}\r\n            onPress={() => {\r\n              setTreeView('summary');\r\n            }}\r\n          >\r\n            <Text style={{ padding: 5 }}>Summary View</Text>\r\n          </TouchableOpacity>\r\n          <View style={{ width: 5 }} />\r\n          <TouchableOpacity\r\n            style={{\r\n              height: 50,\r\n              width: \"25%\",\r\n              borderColor: \"black\",\r\n              borderRadius: 5,\r\n              borderWidth: 1,\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              backgroundColor: treeView === 'topological' ? \"#D3D3D3\" : \"white\",\r\n            }}\r\n            onPress={() => {\r\n              setTreeView('topological');\r\n            }}\r\n          >\r\n            <Text style={{ padding: 5 }}>Topological View</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n        { productionView }\r\n        <View style={{ height: 50 }} />\r\n      </View>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: \"100%\",\r\n    height: \"50%\",\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    paddingBottom: 30,\r\n  },\r\n  buildingLevel: {\r\n    paddingLeft: 15,\r\n    paddingRight: 2,\r\n  },\r\n  buildingLevelInput: {\r\n    width: 30,\r\n    padding: 5,\r\n    borderColor: \"black\",\r\n    borderRadius: 5,\r\n    borderWidth: 1,\r\n    height: 30,\r\n  },\r\n  inputContainer: {\r\n    lexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    padding: 5,\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [875], () => (__webpack_require__(3389)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["resources","allItems","name","itemsPerMin","building","value","ingredientList","amount","NumbericInput","_ref","_ref$height","height","_ref$width","width","_ref$incrementButtonS","incrementButtonStyle","backgroundColor","alignitems","textAlign","_ref$decrementButtonS","decrementButtonStyle","_ref$value","_ref$title","title","_ref$onChange","onChange","console","log","_ref$max","max","_ref$min","min","_ref$showButtons","showButtons","_ref$stepSize","stepSize","_ref$updateOnStateCha","updateOnStateChange","_ref$allowDecimal","allowDecimal","_React$useState","_objectWithoutProperties","_excluded","React","_React$useState2","_slicedToArray","lastValue","setLastValue","_React$useState3","_React$useState4","currentValue","setCurrentValue","getNumericInput","text","replaceAll","length","sanitizedString","hasDecimal","split","forEach","char","includes","Number","toString","useEffect","slice","View","style","alignItems","paddingHorizontal","paddingVertical","Text","flexDirection","justifyContent","TouchableOpacity","borderTopLeftRadius","borderBottomLeftRadius","onPress","TextInput","borderColor","borderWidth","onChangeText","keyboardType","borderRadius","borderBottomRightRadius","borderTopRightRadius","App","_useState","useState","_useState2","treeView","setTreeView","_useState3","_useState4","currentItem","setCurrentItem","_useState5","_useState6","setAmount","_useState7","_useState8","ingredients","setIngredients","_useState9","_useState10","rawResources","setRawResources","_useState11","_useState12","workshopLevel","setWorkShopLevel","_useState13","_useState14","furnaceLevel","setFurnaceLevel","_useState15","_useState16","machineShopLevel","setMachineShopLevel","_useState17","_useState18","industrialFactoryLevel","setIndustrialFactoryLevel","_useState19","_useState20","forgeLevel","setForgeLevel","_useState21","_useState22","manufacturerLevel","setManufacturerLevel","_useState23","_useState24","extractorLevel","setExtractorLevel","_useState25","_useState26","beltIPM","setBeltIPM","_useState27","_useState28","maxItemPerMin","setMaxItemPerMin","_useState29","_useState30","woodExtractorAmount","setWoodExtractorAmount","_useState31","_useState32","stoneExtractorAmount","setStoneExtractorAmount","_useState33","_useState34","ironExtractorAmount","setIronExtractorAmount","_useState35","_useState36","copperExtractorAmount","SetCopperExtractorAmount","_useState37","_useState38","wolframiteExtractorAmount","setWolframiteExtractorAmount","_useState39","_useState40","coalExtractorAmount","setCoalExtractorAmount","ingList","resourceCount","_useState41","_useState42","isLoading","setIsLoading","_info$woodExtractorAm","_info$stoneExtractorA","_info$ironExtractorAm","_info$copperExtractor","_info$wolframiteExtra","_info$coalExtractorAm","_info$workshopLevel","_info$furnaceLevel","_info$machineShopLeve","_info$industrialFacto","_info$forgeLevel","_info$manufacturerLev","_info$extractorLevel","_info$amount","_info$currentItem","_info$beltIPM","info","_regeneratorRuntime","_context","prev","next","AsyncStorage","getItem","sent","JSON","parse","t0","error","stop","Promise","data","_context2","setItem","stringify","ingInfo","find","item","multiplier","levelMultiplier","getBuildingLevel","numberOfBuildings","addIng","GenerateList","maxOutput","Infinity","resource","resourceAmount","rawResource","Name","Amount","ipm","outputPerExtractor","level","extractorOutput","toLowerCase","getResourceAmount","toFixed","productionView","depth","itemInArray","element","push","Building","amountPerMin","arguments","undefined","itemInfo","ingredient","requireAmountPerMin","dag","Map","stack","has","set","pop","last","dependencies","get","dep","order","dfs","node","findIndex","dependency","reverse","map","percent","paddingLeft","renderTopologicalView","sort","a","b","localeCompare","padding","flexWrap","NumericInput","fontSize","Picker","selectedValue","onValueChange","itemValue","itemIndex","itemStyle","Item","label","alignSelf","StyleSheet","create","container","flex","paddingBottom","buildingLevel","paddingRight","buildingLevelInput","inputContainer","lexDirection","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","i","fulfilled","j","Object","keys","every","key","splice","r","n","getter","__esModule","d","leafPrototypes","getProto","getPrototypeOf","obj","t","mode","this","then","ns","def","current","indexOf","getOwnPropertyNames","definition","o","defineProperty","enumerable","g","globalThis","Function","e","window","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","id","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}